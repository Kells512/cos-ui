openapi: 3.0.3
info:
  title: Kafka Service Fleet Manager
  version: 0.0.1
  description: >-
    Kafka Service Fleet Manager is a Rest API to manage kafka instances and
    connectors.
servers:
  - url: 'https://api.openshift.com'
    description: Main (production) server
  - url: 'https://api.stage.openshift.com'
    description: Staging server
  - url: 'http://localhost:8000'
    description: localhost
  - url: /
    description: current domain
security:
  - bearer: []
paths:
  /api/managed-services-api/v1:
    get:
      operationId: versionMetadata
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionMetadata'
          description: Version metadata
      summary: Retrieves the version metadata
  /api/managed-services-api/v1/status:
    get:
      operationId: serviceStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
          description: Ok
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      summary: >-
        Retrieves the status of resources e.g whether we have reached maximum
        service capacity
      security:
        - Bearer: []
  '/api/managed-services-api/v1/kafkas/{id}':
    get:
      operationId: getKafkaById
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRequest'
              examples:
                KafkaRequestGetResponseExample:
                  $ref: '#/components/examples/KafkaRequestExample'
                KafkaRequestGetResponseWithFailedCreationStatusExample:
                  $ref: >-
                    #/components/examples/KafkaRequestFailedCreationStatusExample
          description: Kafka request found by id
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No kafka request with specified id exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      summary: Get a kafka request by id
    delete:
      operationId: deleteKafkaById
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: null
          description: Deleted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400DeletionExample:
                  $ref: '#/components/examples/400DeletionExample'
          description: Validation errors occurred
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404DeleteExample:
                  $ref: '#/components/examples/404DeleteExample'
          description: No kafka request with specified id exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500DeleteExample:
                  $ref: '#/components/examples/500DeleteExample'
          description: Unexpected error occurred
      summary: Delete a kafka request by id
      security:
        - Bearer: []
    parameters:
      - $ref: '#/components/parameters/id'
  /api/managed-services-api/v1/kafkas:
    post:
      operationId: createKafka
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      requestBody:
        description: Kafka data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaRequestPayload'
            examples:
              USRegion:
                $ref: '#/components/examples/USRegionExample'
              EURegion:
                $ref: '#/components/examples/EURegionExample'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRequest'
              examples:
                KafkaRequestPostResponseExample:
                  $ref: '#/components/examples/KafkaRequestExample'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400CreationExample:
                  $ref: '#/components/examples/400CreationExample'
          description: Validation errors occurred
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
                403MaxAllowedInstanceReachedExample:
                  $ref: '#/components/examples/403MaxAllowedInstanceReachedExample'
          description: >-
            User forbidden either because the user is not authorized to access
            the service or because the maximum number of instances that can be
            created by this user has been reached.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: The requested resource doesn't exist
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                409NameConflictExample:
                  $ref: '#/components/examples/409NameConflictExample'
          description: A conflict has been detected in the creation of this resource
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: An unexpected error occurred creating the Kafka Request
      security:
        - Bearer: []
      summary: Create a new kafka Request
    get:
      summary: Returns a list of Kafka requests
      operationId: listKafkas
      security:
        - Bearer: []
      responses:
        '200':
          description: A list of Kafka requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRequestList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                InvalidQueryExample:
                  $ref: '#/components/examples/400InvalidQueryExample'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service.
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/search'
  /api/managed-services-api/v1/cloud_providers:
    get:
      summary: Retrieves the list of supported cloud providers.
      operationId: listCloudProviders
      security:
        - Bearer: []
      responses:
        '200':
          description: Retrieved list of supported cloud providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudProviderList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
  '/api/managed-services-api/v1/cloud_providers/{id}/regions':
    get:
      summary: Retrieves the list of supported regions of the supported cloud provider.
      operationId: listCloudProviderRegions
      security:
        - Bearer: []
      responses:
        '200':
          description: Retrieved list of supported cloud providers regions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudRegionList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
  /api/managed-services-api/v1/serviceaccounts:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountList'
          description: List of service accounts
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: listServiceAccounts
      summary: List service accounts
    post:
      requestBody:
        description: service account request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccountRequest'
            examples:
              sa:
                $ref: '#/components/examples/ServiceAccountRequestExample'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccount'
              examples:
                serviceaccount:
                  $ref: '#/components/examples/ServiceAccountExample'
          description: service account created
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: list of service account
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: createServiceAccount
      summary: Create a service account
  '/api/managed-services-api/v1/serviceaccounts/{id}':
    get:
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccount'
              examples:
                sa:
                  $ref: '#/components/examples/ServiceAccountByIdExample'
          description: get service account by id
      security:
        - Bearer: []
      operationId: getServiceAccountById
      summary: get service account by id
    summary: Get service account by id
    description: Get the service account with the given id
    delete:
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service
        '500':
          content:
            application/json:
              schema: {}
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: deleteServiceAccount
      summary: Delete service account
  '/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials':
    post:
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccount'
              examples:
                sa-reset:
                  $ref: '#/components/examples/ServiceAccountExample'
          description: reset credentials
      security:
        - Bearer: []
      operationId: resetServiceAccountCreds
      summary: reset credentials for the service account
  '/api/managed-services-api/v1/kafkas/{id}/metrics/query_range':
    get:
      summary: Get metrics with timeseries range query by kafka id.
      operationId: GetMetricsByRangeQuery
      security:
        - Bearer: []
      responses:
        '200':
          description: A JSON array of prometheus metrics objects from observatorium
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsRangeQueryList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/duration'
        - $ref: '#/components/parameters/interval'
        - $ref: '#/components/parameters/filters'
  '/api/managed-services-api/v1/kafkas/{id}/metrics/query':
    get:
      summary: Get metrics with instant query by kafka id.
      operationId: GetMetricsByInstantQuery
      security:
        - Bearer: []
      responses:
        '200':
          description: A JSON array of prometheus metrics objects from observatorium
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsInstantQueryList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/filters'
  '/api/managed-services-api/v1/connector-types/{id}':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorType'
          description: The connector type matching the request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: getConnectorTypeByID
      summary: Get a connector type by name and version
    parameters:
      - $ref: '#/components/parameters/id'
  /api/managed-services-api/v1/connector-types:
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorTypeList'
          description: A list of connector types
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: listConnectorTypes
      summary: Returns a list of connector types
  '/api/managed-services-api/v1/kafkas/{id}/connector-deployments':
    post:
      operationId: createConnector
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      requestBody:
        description: Connector data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connector'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400CreationExample:
                  $ref: '#/components/examples/400CreationExample'
          description: Validation errors occurred
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: The requested resource doesn't exist
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: An unexpected error occurred creating the connector
      security:
        - Bearer: []
      summary: Create a new connector
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorList'
          description: A list of connector deployments
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: listConnectors
      summary: Returns a list of connector types
    parameters:
      - $ref: '#/components/parameters/id'
  '/api/managed-services-api/v1/kafkas/{id}/connector-deployments/{cid}':
    get:
      parameters:
        - $ref: '#/components/parameters/id'
        - name: cid
          description: The id of the connector
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: The connector deployment matching the request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: getConnector
      summary: Get a connector deployment
    delete:
      parameters:
        - name: id
          description: Id of the connector
          schema:
            type: string
          in: path
          required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404DeleteExample:
                  $ref: '#/components/examples/404DeleteExample'
          description: No kafka request with specified id exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500DeleteExample:
                  $ref: '#/components/examples/500DeleteExample'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: deleteConnector
      summary: Delete a connector
    parameters:
      - $ref: '#/components/parameters/id'
  /api/managed-services-api/v1/kafka-connector-clusters:
    post:
      operationId: createConnectorCluster
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      requestBody:
        description: Connector cluster data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorCluster'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCluster'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400CreationExample:
                  $ref: '#/components/examples/400CreationExample'
          description: Validation errors occurred
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: The requested resource doesn't exist
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: An unexpected error occurred creating the connector cluster
      security:
        - Bearer: []
      summary: Create a new connector cluster
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorClusterList'
          description: A list of connector clusters
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: listConnectorClusters
      summary: Returns a list of connector clusters
    parameters:
      - $ref: '#/components/parameters/id'
  '/api/managed-services-api/v1/kafka-connector-clusters/{id}':
    get:
      parameters:
        - $ref: '#/components/parameters/id'
        - name: cid
          description: The id of the connector cluster
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCluster'
          description: The connector cluster matching the request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector cluster type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: getConnectorCluster
      summary: Get a connector cluster
    delete:
      parameters:
        - name: id
          description: Id of the connector cluster
          schema:
            type: string
          in: path
          required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404DeleteExample:
                  $ref: '#/components/examples/404DeleteExample'
          description: No resource with specified id exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500DeleteExample:
                  $ref: '#/components/examples/500DeleteExample'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: deleteConnectorCluster
      summary: Delete a connector cluster
    parameters:
      - $ref: '#/components/parameters/id'
  '/api/managed-services-api/v1/kafka-connector-clusters/{id}/addon-parameters':
    get:
      parameters:
        - $ref: '#/components/parameters/id'
        - name: cid
          description: The id of the connector cluster
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddonParameterList'
          description: >-
            The parameters that should be used to configure the managed
            connector addon on the cluster.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector cluster type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: getConnectorClusterAddonParameters
      summary: Get a connector cluster's addon parameters
    parameters:
      - $ref: '#/components/parameters/id'
  '/api/managed-services-api/v1/kafka-connector-clusters/{id}/status':
    put:
      requestBody:
        description: Cluster status update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorClusterUpdateStatus'
        required: true
      responses:
        '200':
          description: Cluster status is updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
      security:
        - Bearer: []
      operationId: updateKafkaConnectorAgentClusterStatus
      summary: Update the status of a connector agent cluster
    parameters:
      - $ref: '#/components/parameters/id'
  '/api/managed-services-api/v1/kafka-connector-clusters/{id}/connectors':
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - in: query
          name: gt_version
          description: >-
            filters the connectors to those with a version greater than the
            given value
          schema:
            type: integer
            format: int64
        - in: query
          name: watch
          description: >-
            watch for changes to the resources and return them as a stream of
            watch events. Specify gt_version to specify the starting point.
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/ConnectorWatchEvent'
          description: A list of connector deployments
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: listClusterAsignedConnectors
      summary: Returns a list of connector types
  '/api/managed-services-api/v1/kafka-connector-clusters/{id}/connectors/{cid}/status':
    put:
      requestBody:
        description: Cluster status update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorUpdateStatus'
        required: true
      responses:
        '200':
          description: Cluster status is updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
      security:
        - Bearer: []
      operationId: updateKafkaConnectorStatus
      summary: Update the status of a connector agent cluster
    parameters:
      - $ref: '#/components/parameters/id'
      - name: cid
        description: The id of the connector
        schema:
          type: string
        in: path
        required: true
  '/api/managed-services-api/v1/agent-clusters/{id}/status':
    put:
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: Cluster status update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataPlaneClusterUpdateStatusRequest'
        required: true
      responses:
        '200':
          description: Cluster status is updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
      security:
        - Bearer: []
      operationId: updateAgentClusterStatus
      summary: Update the status of an agent cluster
  '/api/managed-services-api/v1/agent-clusters/{id}/kafkas/status':
    put:
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: Kafka clusters status update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataPlaneKafkaStatusUpdateRequest'
        required: true
      responses:
        '200':
          description: Status is updated for Kafka clusters
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
      security:
        - Bearer: []
      operationId: updateKafkaClusterStatus
      summary: Update the status of Kafka clusters on an agent cluster
  '/api/managed-services-api/v1/agent-clusters/{id}/kafkas':
    get:
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: The list of the ManagedKafkas for the specified agent cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedKafkaList'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
      security:
        - Bearer: []
      operationId: getKafkas
      summary: Get the list of ManagedaKafkas for the specified agent cluster
  '/api/managed-services-api/v1/agent-clusters/{id}':
    get:
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: The ManagedKafkaAgent CR Spec
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataplaneClusterAgentConfig'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
      security:
        - Bearer: []
      operationId: getKafkaAgent
      summary: Get the spec of the ManagedKafkaAgent CR spec
  /api/clusters_mgmt/v1:
    get:
      description: |
        Retrieves the version metadata.
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  /api/clusters_mgmt/v1/addons:
    post:
      description: |
        Create a new add-on and add it to the collection of add-ons.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOn'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOn'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the list of add-ons.
      parameters:
        - name: order
          description: >
            Order criteria.


            The syntax of this parameter is similar to the syntax of the _order
            by_ clause of

            a SQL statement, but using the names of the attributes of the add-on
            instead of

            the names of the columns of a table. For example, in order to sort
            the add-ons

            descending by name the value should be:



            ```

            name desc

            ```


            If the parameter isn't provided, or if the value is empty, then the
            order of the

            results is undefined.
          in: query
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: search
          description: >
            Search criteria.


            The syntax of this parameter is similar to the syntax of the _where_
            clause of an

            SQL statement, but using the names of the attributes of the add-on
            instead of

            the names of the columns of a table. For example, in order to
            retrieve all the

            add-ons with a name starting with `my` the value should be:



            ```

            name like 'my%'

            ```


            If the parameter isn't provided, or if the value is empty, then all
            the add-ons

            that the user has permission to see will be returned.
          in: query
          schema:
            type: string
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of add-ons.
                    type: array
                    items:
                      $ref: '#/components/schemas/AddOn'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/addons/{addon_id}':
    delete:
      description: |
        Deletes the add-on.
      parameters:
        - name: addon_id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the details of the add-on.
      parameters:
        - name: addon_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOn'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Updates the add-on.
      parameters:
        - name: addon_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOn'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOn'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  /api/clusters_mgmt/v1/aws_infrastructure_access_roles:
    get:
      parameters:
        - name: order
          description: >
            Order criteria.


            The syntax of this parameter is similar to the syntax of the _order
            by_ clause of

            a SQL statement, but using the names of the attributes of the role
            instead of

            the names of the columns of a table. For example, in order to sort
            the roles

            descending by dislay_name the value should be:



            ```

            display_name desc

            ```


            If the parameter isn't provided, or if the value is empty, then the
            order of the

            results is undefined.
          in: query
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: search
          description: >
            Search criteria.


            The syntax of this parameter is similar to the syntax of the _where_
            clause of an

            SQL statement, but using the names of the attributes of the role
            instead of

            the names of the columns of a table. For example, in order to
            retrieve all the

            role with a name starting with `my`the value should be:



            ```

            display_name like 'my%'

            ```


            If the parameter isn't provided, or if the value is empty, then all
            the roles

            that the user has permission to see will be returned.
          in: query
          schema:
            type: string
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of roles.
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureAccessRole'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/aws_infrastructure_access_roles/{aws_infrastructure_access_role_id}':
    get:
      description: |
        Retrieves the details of the aws infrastructure access role.
      parameters:
        - name: aws_infrastructure_access_role_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSInfrastructureAccessRole'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  /api/clusters_mgmt/v1/cloud_providers:
    get:
      description: |
        Retrieves the list of cloud providers.
      parameters:
        - name: order
          description: >
            Order criteria.


            The syntax of this parameter is similar to the syntax of the _order
            by_ clause of

            a SQL statement, but using the names of the attributes of the cloud
            provider

            instead of the names of the columns of a table. For example, in
            order to sort the

            clusters descending by name identifier the value should be:



            ```

            name desc

            ```


            If the parameter isn't provided, or if the value is empty, then the
            order of the

            results is undefined.
          in: query
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: search
          description: >
            Search criteria.


            The syntax of this parameter is similar to the syntax of the _where_
            clause of a

            SQL statement, but using the names of the attributes of the cloud
            provider

            instead of the names of the columns of a table. For example, in
            order to retrieve

            all the cloud providers with a name starting with `A` the value
            should be:



            ```

            name like 'A%'

            ```


            If the parameter isn't provided, or if the value is empty, then all
            the clusters

            that the user has permission to see will be returned.
          in: query
          schema:
            type: string
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of cloud providers.
                    type: array
                    items:
                      $ref: '#/components/schemas/CloudProvider1'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}':
    get:
      description: |
        Retrieves the details of the cloud provider.
      parameters:
        - name: cloud_provider_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudProvider1'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}/available_regions':
    post:
      description: >
        Retrieves the list of available regions of the cloud provider.


        IMPORTANT: This collection doesn't currently support paging or
        searching, so the returned

        `page` will always be 1 and `size` and `total` will always be the total
        number of available regions

        of the provider.
      parameters:
        - name: cloud_provider_id
          in: path
          schema:
            type: string
        - name: page
          description: >
            Index of the returned page, where one corresponds to the first page.
            As this

            collection doesn't support paging the result will always be `1`.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: >
            Number of items that will be contained in the returned page. As this
            collection

            doesn't support paging or searching the result will always be the
            total number of

            regions of the provider.
          in: query
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWS'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of cloud regions.
                    type: array
                    items:
                      $ref: '#/components/schemas/CloudRegion1'
                  page:
                    description: >
                      Index of the returned page, where one corresponds to the
                      first page. As this

                      collection doesn't support paging the result will always
                      be `1`.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Number of items that will be contained in the returned
                      page. As this collection

                      doesn't support paging or searching the result will always
                      be the total number of

                      regions of the provider.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page. As this collection
                      doesn't support paging or

                      searching the result will always be the total number of
                      available regions of the provider.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}/regions':
    get:
      description: >
        Retrieves the list of regions of the cloud provider.


        IMPORTANT: This collection doesn't currently support paging or
        searching, so the returned

        `page` will always be 1 and `size` and `total` will always be the total
        number of regions

        of the provider.
      parameters:
        - name: cloud_provider_id
          in: path
          schema:
            type: string
        - name: page
          description: >
            Index of the returned page, where one corresponds to the first page.
            As this

            collection doesn't support paging the result will always be `1`.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: >
            Number of items that will be contained in the returned page. As this
            collection

            doesn't support paging or searching the result will always be the
            total number of

            regions of the provider.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of cloud providers.
                    type: array
                    items:
                      $ref: '#/components/schemas/CloudRegion1'
                  page:
                    description: >
                      Index of the returned page, where one corresponds to the
                      first page. As this

                      collection doesn't support paging the result will always
                      be `1`.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Number of items that will be contained in the returned
                      page. As this collection

                      doesn't support paging or searching the result will always
                      be the total number of

                      regions of the provider.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page. As this collection
                      doesn't support paging or

                      searching the result will always be the total number of
                      regions of the provider.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}/regions/{region_id}':
    get:
      description: |
        Retrieves the details of the region.
      parameters:
        - name: cloud_provider_id
          in: path
          schema:
            type: string
        - name: region_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudRegion1'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  /api/clusters_mgmt/v1/clusters:
    post:
      description: |
        Provision a new cluster and add it to the collection of clusters.

        See the `register_cluster` method for adding an existing cluster.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cluster'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the list of clusters.
      parameters:
        - name: order
          description: >
            Order criteria.


            The syntax of this parameter is similar to the syntax of the _order
            by_ clause of

            a SQL statement, but using the names of the attributes of the
            cluster instead of

            the names of the columns of a table. For example, in order to sort
            the clusters

            descending by region identifier the value should be:



            ```

            region.id desc

            ```


            If the parameter isn't provided, or if the value is empty, then the
            order of the

            results is undefined.
          in: query
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: search
          description: >
            Search criteria.


            The syntax of this parameter is similar to the syntax of the _where_
            clause of a

            SQL statement, but using the names of the attributes of the cluster
            instead of

            the names of the columns of a table. For example, in order to
            retrieve all the

            clusters with a name starting with `my` in the `us-east-1` region
            the value

            should be:



            ```

            name like 'my%' and region.id = 'us-east-1'

            ```


            If the parameter isn't provided, or if the value is empty, then all
            the

            clusters that the user has permission to see will be returned.
          in: query
          schema:
            type: string
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of clusters.
                    type: array
                    items:
                      $ref: '#/components/schemas/Cluster'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}':
    delete:
      description: |
        Deletes the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the details of the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Updates the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cluster'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/hibernate':
    post:
      description: >
        Initiates cluster hibernation. While hibernating a cluster will not
        consume any cloud provider infrastructure

        but will be counted for quota.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/resume':
    post:
      description: |
        Resumes from Hibernation.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/addons':
    post:
      description: >
        Create a new add-on installation and add it to the collection of add-on
        installations on the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOnInstallation'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOnInstallation'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the list of add-on installations.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: order
          description: >
            Order criteria.


            The syntax of this parameter is similar to the syntax of the _order
            by_ clause of

            a SQL statement, but using the names of the attributes of the add-on
            installation

            instead of the names of the columns of a table. For example, in
            order to sort the

            add-on installations descending by name the value should be:



            ```

            name desc

            ```


            If the parameter isn't provided, or if the value is empty, then the
            order of the

            results is undefined.
          in: query
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: search
          description: >
            Search criteria.


            The syntax of this parameter is similar to the syntax of the _where_
            clause of an

            SQL statement, but using the names of the attributes of the add-on
            installation

            instead of the names of the columns of a table. For example, in
            order to retrieve

            all the add-on installations with a name starting with `my` the
            value should be:



            ```

            name like 'my%'

            ```


            If the parameter isn't provided, or if the value is empty, then all
            the add-on

            installations that the user has permission to see will be returned.
          in: query
          schema:
            type: string
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of add-on installations.
                    type: array
                    items:
                      $ref: '#/components/schemas/AddOnInstallation'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/addons/{addoninstallation_id}':
    delete:
      description: >
        Delete an add-on installation and remove it from the collection of
        add-on installations on the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: addoninstallation_id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the details of the add-on installation.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: addoninstallation_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOnInstallation'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Updates the add-on installation.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: addoninstallation_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOnInstallation'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOnInstallation'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/aws_infrastructure_access_role_grants':
    post:
      description: >
        Create a new AWS infrastructure access role grant and add it to the
        collection of

        AWS infrastructure access role grants on the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSInfrastructureAccessRoleGrant'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSInfrastructureAccessRoleGrant'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the list of AWS infrastructure access role grants.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: order
          description: >
            Order criteria.


            The syntax of this parameter is similar to the syntax of the _order
            by_ clause of

            a SQL statement, but using the names of the attributes of the AWS
            infrastructure access role grant

            instead of the names of the columns of a table. For example, in
            order to sort the

            AWS infrastructure access role grants descending by user ARN the
            value should be:



            ```

            user_arn desc

            ```


            If the parameter isn't provided, or if the value is empty, then the
            order of the

            results is undefined.
          in: query
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: search
          description: >
            Search criteria.


            The syntax of this parameter is similar to the syntax of the _where_
            clause of an

            SQL statement, but using the names of the attributes of the AWS
            infrastructure access role grant

            instead of the names of the columns of a table. For example, in
            order to retrieve

            all the AWS infrastructure access role grants with a user ARN
            starting with `user` the value should be:



            ```

            user_arn like '%user'

            ```


            If the parameter isn't provided, or if the value is empty, then all
            the AWS

            infrastructure access role grants that the user has permission to
            see will be returned.
          in: query
          schema:
            type: string
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of AWS infrastructure access role grants.
                    type: array
                    items:
                      $ref: '#/components/schemas/AWSInfrastructureAccessRoleGrant'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/aws_infrastructure_access_role_grants/{aws_infrastructure_access_role_grant_id}':
    delete:
      description: |
        Deletes the AWS infrastructure access role grant.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: aws_infrastructure_access_role_grant_id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the details of the AWS infrastructure access role grant.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: aws_infrastructure_access_role_grant_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSInfrastructureAccessRoleGrant'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/credentials':
    get:
      description: |
        Retrieves the details of the credentials of a cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterCredentials'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration':
    get:
      description: |
        Retrieves the details of the external configuration.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalConfiguration'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/labels':
    post:
      description: |
        Adds a new label to the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the list of labels.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: |
            Number of items contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of labels.
                    type: array
                    items:
                      $ref: '#/components/schemas/Label'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: |
                      Number of items contained in the returned page.
                    type: integer
                    format: int32
                  total:
                    description: |
                      Total number of items of the collection.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/labels/{label_id}':
    delete:
      description: |
        Deletes the label.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: label_id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the details of the label.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: label_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Update the label.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: label_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/syncsets':
    post:
      description: |
        Adds a new syncset to the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Syncset'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Syncset'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the list of syncsets.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: |
            Number of items contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of syncsets.
                    type: array
                    items:
                      $ref: '#/components/schemas/Syncset'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: |
                      Number of items contained in the returned page.
                    type: integer
                    format: int32
                  total:
                    description: |
                      Total number of items of the collection.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/syncsets/{syncset_id}':
    delete:
      description: |
        Deletes the syncset.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: syncset_id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the details of the syncset.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: syncset_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Syncset'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Update the syncset.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: syncset_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Syncset'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Syncset'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/groups':
    get:
      description: |
        Retrieves the list of groups.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: |
            Number of items contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of groups.
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: |
                      Number of items contained in the returned page.
                    type: integer
                    format: int32
                  total:
                    description: |
                      Total number of items of the collection.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/groups/{group_id}':
    get:
      description: |
        Retrieves the details of the group.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: group_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/groups/{group_id}/users':
    post:
      description: |
        Adds a new user to the group.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: group_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the list of users.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: group_id
          in: path
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: |
            Number of items contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of users.
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: |
                      Number of items contained in the returned page.
                    type: integer
                    format: int32
                  total:
                    description: |
                      Total number of items of the collection.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/groups/{group_id}/users/{user_id}':
    delete:
      description: |
        Deletes the user.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: group_id
          in: path
          schema:
            type: string
        - name: user_id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the details of the user.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: group_id
          in: path
          schema:
            type: string
        - name: user_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers':
    post:
      description: |
        Adds a new identity provider to the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProvider'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the list of identity providers.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: |
            Number of items contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of identity providers.
                    type: array
                    items:
                      $ref: '#/components/schemas/IdentityProvider'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: |
                      Number of items contained in the returned page.
                    type: integer
                    format: int32
                  total:
                    description: |
                      Total number of items of the collection.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}':
    delete:
      description: |
        Deletes the identity provider.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: identity_provider_id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the details of the identity provider.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: identity_provider_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Update identity provider in the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: identity_provider_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProvider'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/ingresses':
    post:
      description: |
        Adds a new ingress to the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingress'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingress'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the list of ingresses.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: |
            Number of items contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of ingresses.
                    type: array
                    items:
                      $ref: '#/components/schemas/Ingress'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: |
                      Number of items contained in the returned page.
                    type: integer
                    format: int32
                  total:
                    description: |
                      Total number of items of the collection.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Updates all ingresses
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Ingress'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingress'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/ingresses/{ingress_id}':
    delete:
      description: |
        Deletes the ingress.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: ingress_id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the details of the ingress.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: ingress_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingress'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Updates the ingress.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: ingress_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingress'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingress'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/logs':
    get:
      description: |
        Retrieves the list of log links.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: |
            Number of items contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of log links.
                    type: array
                    items:
                      $ref: '#/components/schemas/Log'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: |
                      Number of items contained in the returned page.
                    type: integer
                    format: int32
                  total:
                    description: |
                      Total number of items of the collection.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/logs/install':
    get:
      description: |
        Retrieves the details of the log.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: offset
          description: |
            Line offset to start logs from. if 0 retreive entire log.
            If offset > #lines return an empty log.
          in: query
          schema:
            type: integer
            format: int32
        - name: tail
          description: |
            Returns the number of tail lines from the end of the log.
            If there are no line breaks or the number of lines < tail
            return the entire log.
            Either 'tail' or 'offset' can be set. Not both. 
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/logs/uninstall':
    get:
      description: |
        Retrieves the details of the log.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: offset
          description: |
            Line offset to start logs from. if 0 retreive entire log.
            If offset > #lines return an empty log.
          in: query
          schema:
            type: integer
            format: int32
        - name: tail
          description: |
            Returns the number of tail lines from the end of the log.
            If there are no line breaks or the number of lines < tail
            return the entire log.
            Either 'tail' or 'offset' can be set. Not both. 
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/machine_pools':
    post:
      description: |
        Adds a new machine pool to the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachinePool'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachinePool'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the list of machine pools.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: |
            Number of items contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of machine pools.
                    type: array
                    items:
                      $ref: '#/components/schemas/MachinePool'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: |
                      Number of items contained in the returned page.
                    type: integer
                    format: int32
                  total:
                    description: |
                      Total number of items of the collection.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/machine_pools/{machine_pool_id}':
    delete:
      description: |
        Deletes the machine pool.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: machine_pool_id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the details of the machine pool.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: machine_pool_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachinePool'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Updates the machine pool.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: machine_pool_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachinePool'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachinePool'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/alerts':
    get:
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertsInfo'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/cluster_operators':
    get:
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterOperatorsInfo'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/cpu_total_by_node_roles_os':
    get:
      description: |
        Retrieves the metrics.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CPUTotalsNodeRoleOSMetricNode'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/nodes':
    get:
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesInfo'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/socket_total_by_node_roles_os':
    get:
      description: |
        Retrieves the metrics.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocketTotalsNodeRoleOSMetricNode'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/product':
    get:
      description: |
        Retrieves the details of the product.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/provision_shard':
    get:
      description: |
        Retrieves the details of the provision shard.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionShard'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/status':
    get:
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterStatus'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies':
    post:
      description: |
        Adds a new upgrade policy to the cluster.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradePolicy'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradePolicy'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the list of upgrade policies.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: |
            Number of items contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of upgrade policy.
                    type: array
                    items:
                      $ref: '#/components/schemas/UpgradePolicy'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: |
                      Number of items contained in the returned page.
                    type: integer
                    format: int32
                  total:
                    description: |
                      Total number of items of the collection.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies/{upgrade_policy_id}':
    delete:
      description: |
        Deletes the upgrade policy.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: upgrade_policy_id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: |
            Success.
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      description: |
        Retrieves the details of the upgrade policy.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: upgrade_policy_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradePolicy'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Update the upgrade policy.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: upgrade_policy_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradePolicy'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradePolicy'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies/{upgrade_policy_id}/state':
    get:
      description: |
        Retrieves the details of the upgrade policy state.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: upgrade_policy_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradePolicyState'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Update the upgrade policy state.
      parameters:
        - name: cluster_id
          in: path
          schema:
            type: string
        - name: upgrade_policy_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradePolicyState'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradePolicyState'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  /api/clusters_mgmt/v1/dashboards:
    get:
      description: |
        Retrieves a list of dashboards.
      parameters:
        - name: order
          description: >
            Order criteria.


            The syntax of this parameter is similar to the syntax of the _order
            by_ clause of

            a SQL statement, but using the names of the attributes of the
            dashboard instead of

            the names of the columns of a table. For example, in order to sort
            the dashboards

            descending by name the value should be:



            ```

            name desc

            ```


            If the parameter isn't provided, or if the value is empty, then the
            order of the

            results is undefined.
          in: query
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: search
          description: >
            Search criteria.


            The syntax of this parameter is similar to the syntax of the _where_
            clause of a

            SQL statement, but using the names of the attributes of the
            dashboard instead of

            the names of the columns of a table. For example, in order to
            retrieve all the

            dashboards with a name starting with `my` the value should be:



            ```

            name like 'my%'

            ```


            If the parameter isn't provided, or if the value is empty, then all
            the

            dashboards that the user has permission to see will be returned.
          in: query
          schema:
            type: string
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of dashboards.
                    type: array
                    items:
                      $ref: '#/components/schemas/Dashboard'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/dashboards/{dashboard_id}':
    get:
      description: |
        Retrieves the details of the dashboard.
      parameters:
        - name: dashboard_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  /api/clusters_mgmt/v1/flavours:
    post:
      description: |
        Adds a new cluster flavour.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flavour'
      responses:
        '201':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flavour'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    get:
      parameters:
        - name: order
          description: >
            Order criteria.


            The syntax of this parameter is similar to the syntax of the _order
            by_ clause of

            a SQL statement, but using the names of the attributes of the
            flavour instead of

            the names of the columns of a table. For example, in order to sort
            the flavours

            descending by name the value should be:



            ```

            name desc

            ```


            If the parameter isn't provided, or if the value is empty, then the
            order of the

            results is undefined.
          in: query
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: search
          description: >
            Search criteria.


            The syntax of this parameter is similar to the syntax of the _where_
            clause of an

            SQL statement, but using the names of the attributes of the flavour
            instead of

            the names of the columns of a table. For example, in order to
            retrieve all the

            flavours with a name starting with `my`the value should be:



            ```

            name like 'my%'

            ```


            If the parameter isn't provided, or if the value is empty, then all
            the flavours

            that the user has permission to see will be returned.
          in: query
          schema:
            type: string
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of flavours.
                    type: array
                    items:
                      $ref: '#/components/schemas/Flavour'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/flavours/{flavour_id}':
    get:
      description: |
        Retrieves the details of the cluster flavour.
      parameters:
        - name: flavour_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flavour'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
    patch:
      description: |
        Updates the flavour.

        Attributes that can be updated are:

        - `aws.infra_volume`
        - `aws.infra_instance_type`
        - `gcp.infra_instance_type`
      parameters:
        - name: flavour_id
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flavour'
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flavour'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  /api/clusters_mgmt/v1/machine_types:
    get:
      description: |
        Retrieves the list of machine types.
      parameters:
        - name: order
          description: >
            Order criteria.


            The syntax of this parameter is similar to the syntax of the _order
            by_ clause of

            a SQL statement, but using the names of the attributes of the
            machine type

            instead of the names of the columns of a table. For example, in
            order to sort the

            machine types descending by name identifier the value should be:



            ```

            name desc

            ```


            If the parameter isn't provided, or if the value is empty, then the
            order of the

            results is undefined.
          in: query
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: search
          description: >
            Search criteria.


            The syntax of this parameter is similar to the syntax of the _where_
            clause of a

            SQL statement, but using the names of the attributes of the machine
            type

            instead of the names of the columns of a table. For example, in
            order to retrieve

            all the machine types with a name starting with `A` the value should
            be:



            ```

            name like 'A%'

            ```


            If the parameter isn't provided, or if the value is empty, then all
            the machine

            types that the user has permission to see will be returned.
          in: query
          schema:
            type: string
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of cloud providers.
                    type: array
                    items:
                      $ref: '#/components/schemas/MachineType'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  /api/clusters_mgmt/v1/products:
    get:
      description: |
        Retrieves the list of products.
      parameters:
        - name: order
          description: >
            Order criteria.


            The syntax of this parameter is similar to the syntax of the _order
            by_ clause of

            a SQL statement, but using the names of the attributes of the
            product instead of

            the names of the columns of a table. For example, in order to sort
            the products

            descending by name the value should be:



            ```

            name desc

            ```


            If the parameter isn't provided, or if the value is empty, then the
            order of the

            results is undefined.
          in: query
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: search
          description: >
            Search criteria.


            The syntax of this parameter is similar to the syntax of the _where_
            clause of an

            SQL statement, but using the names of the attributes of the product
            instead of

            the names of the columns of a table. For example, in order to
            retrieve all the

            products with a name starting with `my` the value should be:



            ```

            name like 'my%'

            ```


            If the parameter isn't provided, or if the value is empty, then all
            the products

            that the user has permission to see will be returned.
          in: query
          schema:
            type: string
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of products.
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/products/{product_id}':
    get:
      description: |
        Retrieves the details of the product.
      parameters:
        - name: product_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  /api/clusters_mgmt/v1/provision_shards:
    get:
      parameters:
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved a list of provision shards.
                    type: array
                    items:
                      $ref: '#/components/schemas/ProvisionShard'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.
                    type: integer
                    format: int32
                  total:
                    description: |
                      Total number of items of the collection.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/provision_shards/{provision_shard_id}':
    get:
      description: |
        Retrieves the details of the provision shard.
      parameters:
        - name: provision_shard_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionShard'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  /api/clusters_mgmt/v1/versions:
    get:
      description: |
        Retrieves a list of versions.
      parameters:
        - name: order
          description: >
            Order criteria.


            The syntax of this parameter is similar to the syntax of the _order
            by_ clause of

            a SQL statement, but using the names of the attributes of the
            version instead of

            the names of the columns of a table. For example, in order to sort
            the versions

            descending by identifier the value should be:



            ```

            id desc

            ```


            If the parameter isn't provided, or if the value is empty, then the
            order of the

            results is undefined.
          in: query
          schema:
            type: string
        - name: page
          description: >
            Index of the requested page, where one corresponds to the first
            page.
          in: query
          schema:
            type: integer
            format: int32
        - name: search
          description: >
            Search criteria.


            The syntax of this parameter is similar to the syntax of the _where_
            clause of a

            SQL statement, but using the names of the attributes of the version
            instead of

            the names of the columns of a table. For example, in order to
            retrieve all the

            versions that are enabled:



            ```

            enabled = 't'

            ```


            If the parameter isn't provided, or if the value is empty, then all
            the versions

            that the user has permission to see will be returned.
          in: query
          schema:
            type: string
        - name: size
          description: |
            Maximum number of items that will be contained in the returned page.

            Default value is `100`.
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Retrieved list of versions.
                    type: array
                    items:
                      $ref: '#/components/schemas/Version'
                  page:
                    description: >
                      Index of the requested page, where one corresponds to the
                      first page.
                    type: integer
                    format: int32
                  size:
                    description: >
                      Maximum number of items that will be contained in the
                      returned page.


                      Default value is `100`.
                    type: integer
                    format: int32
                  total:
                    description: >
                      Total number of items of the collection that match the
                      search criteria,

                      regardless of the size of the page.
                    type: integer
                    format: int32
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
  '/api/clusters_mgmt/v1/versions/{version_id}':
    get:
      description: |
        Retrieves the details of the version.
      parameters:
        - name: version_id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        default:
          description: |
            Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error1'
components:
  schemas:
    ObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
    List:
      required:
        - kind
        - page
        - size
        - total
        - items
      type: object
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
    Error:
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            code:
              type: string
            reason:
              type: string
            operation_id:
              type: string
    ErrorList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Error'
    KafkaRequest:
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            status:
              type: string
            cloud_provider:
              type: string
            multi_az:
              type: boolean
            region:
              type: string
            owner:
              type: string
            name:
              type: string
            bootstrapServerHost:
              type: string
            created_at:
              format: date-time
              type: string
            updated_at:
              format: date-time
              type: string
            failed_reason:
              type: string
            version:
              type: string
          example:
            $ref: '#/components/examples/KafkaRequestExample'
    KafkaRequestList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          example:
            kind: KafkaRequestList
            page: '1'
            size: '1'
            total: '1'
            item:
              $ref: '#/components/examples/KafkaRequestExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/KafkaRequest'
    VersionMetadata:
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          example:
            kind: APIVersion
            id: v1
            href: /api/managed-services-api/v1
            collections:
              - id: kafkas
                href: /api/managed-services-api/v1/kafkas
                kind: KafkaList
          properties:
            collections:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ObjectReference'
    ServiceStatus:
      description: Schema for the service status response body
      example:
        kafkas:
          max_capacity_reached: true
      type: object
      properties:
        kafkas:
          description: The kafka resource api status
          type: object
          required:
            - max_capacity_reached
          properties:
            max_capacity_reached:
              description: Indicates whether we have reached kafka maximum capacity
              type: boolean
    KafkaRequestPayload:
      description: Schema for the request body sent to /kafkas POST
      required:
        - name
      type: object
      properties:
        cloud_provider:
          description: The cloud provider where the Kafka cluster will be created in
          type: string
        multi_az:
          description: Set this to true to configure the Kafka cluster to be multiAZ
          type: boolean
        name:
          description: >-
            The name of the Kafka cluster. It must consist of lower-case
            alphanumeric characters or '-', start with an alphabetic character,
            and end with an alphanumeric character, and can not be longer than
            32 characters.
          type: string
        region:
          description: The region where the Kafka cluster will be created in
          type: string
    CloudProviderList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          example:
            kind: CloudProviderList
            page: '1'
            size: '1'
            total: '1'
            item:
              $ref: '#/components/examples/CloudProviderExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/CloudProvider'
    CloudRegionList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          example:
            kind: CloudRegionList
            page: '1'
            size: '1'
            total: '1'
            item:
              $ref: '#/components/examples/CloudRegionExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/CloudRegion'
    CloudProvider:
      description: Cloud provider.
      properties:
        kind:
          description: Indicates the type of this object. Will be 'CloudProvider' link.
          type: string
        id:
          description: Unique identifier of the object.
          type: string
        display_name:
          description: Name of the cloud provider for display purposes.
          type: string
        name:
          description: 'Human friendly identifier of the cloud provider, for example `aws`.'
          type: string
        enabled:
          description: Whether the cloud provider is enabled for deploying an OSD cluster.
          type: boolean
      required:
        - enabled
    CloudRegion:
      description: Description of a region of a cloud provider.
      properties:
        kind:
          description: Indicates the type of this object. Will be 'CloudRegion'.
          type: string
        id:
          description: Unique identifier of the object.
          type: string
        display_name:
          description: 'Name of the region for display purposes, for example `N. Virginia`.'
          type: string
        enabled:
          description: Whether the region is enabled for deploying an OSD cluster.
          type: boolean
          default: false
      required:
        - enabled
    ServiceAccount:
      description: >-
        Service Account created in MAS-SSO for the Kafka Cluster for
        authentication
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            id:
              description: server generated unique id of the service account
              type: string
            name:
              description: ''
              type: string
            description:
              description: ''
              type: string
            clientID:
              type: string
            clientSecret:
              type: string
            owner:
              type: string
          example:
            $ref: '#/components/examples/ServiceAccountExample'
    ServiceAccountRequest:
      description: Schema for the request to create a service account
      required:
        - name
      type: object
      properties:
        name:
          description: The name of the service account
          type: string
        description:
          description: A description for the service account
          type: string
      example:
        $ref: '#/components/examples/ServiceAccountRequestExample'
    ServiceAccountListItem:
      description: ''
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            id:
              description: server generated unique id of the service account
              type: string
            clientID:
              description: ''
              type: string
            name:
              description: ''
              type: string
            owner:
              description: ''
              type: string
            description:
              description: ''
    ServiceAccountList:
      allOf:
        - type: object
          example:
            kind: ServiceAccountList
            items:
              $ref: '#/components/examples/ServiceAccountListItemExample'
          properties:
            kind:
              type: string
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ServiceAccountListItem'
    MetricsRangeQueryList:
      allOf:
        - type: object
          example:
            kind: MetricsRangeQueryList
            id: 1nbpS70HduPe4l0to8jSg2CLzfu
            items:
              $ref: '#/components/examples/MetricsRangeQueryExample'
          properties:
            kind:
              type: string
            id:
              type: string
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/RangeQuery'
    RangeQuery:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/values'
    values:
      type: object
      properties:
        Timestamp:
          type: integer
          format: int64
        Value:
          type: number
          format: double
      required:
        - Value
    MetricsInstantQueryList:
      allOf:
        - type: object
          example:
            kind: MetricsInstantQueryList
            id: 1nbpS70HduPe4l0to8jSg2CLzfu
            items:
              $ref: '#/components/examples/MetricsInstantQueryExample'
          properties:
            kind:
              type: string
            id:
              type: string
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/InstantQuery'
    InstantQuery:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        Timestamp:
          type: integer
          format: int64
        Value:
          type: number
          format: double
      required:
        - Value
    ListReference:
      required:
        - kind
        - items
      type: object
      properties:
        kind:
          type: string
    PrivateObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
    MetaV1Condition:
      type: object
      properties:
        type:
          type: string
        reason:
          type: string
        message:
          type: string
        status:
          type: string
        lastTransitionTime:
          type: string
    ManagedKafkaCapacity:
      type: object
      properties:
        ingressEgressThroughputPerSec:
          type: string
        totalMaxConnections:
          type: integer
          format: int
        maxDataRetentionSize:
          type: string
        maxPartitions:
          type: integer
          format: int
        maxDataRetentionPeriod:
          type: string
    ManagedKafkaVersions:
      type: object
      properties:
        kafka:
          type: string
        strimzi:
          type: string
    ManagedKafka:
      allOf:
        - $ref: '#/components/schemas/PrivateObjectReference'
        - type: object
          properties:
            metadata:
              type: object
              properties:
                name:
                  type: string
                namespace:
                  type: string
                annotations:
                  type: object
                  properties:
                    bf2.org/id:
                      type: string
                    bf2.org/placementId:
                      type: string
            spec:
              type: object
              properties:
                capacity:
                  $ref: '#/components/schemas/ManagedKafkaCapacity'
                oauth:
                  type: object
                  properties:
                    clientId:
                      type: string
                    clientSecret:
                      type: string
                    tokenEndpointURI:
                      type: string
                    jwksEndpointURI:
                      type: string
                    validIssuerEndpointURI:
                      type: string
                    userNameClaim:
                      type: string
                    tlsTrustedCertificate:
                      type: string
                endpoint:
                  type: object
                  properties:
                    bootstrapServerHost:
                      type: string
                    tls:
                      type: object
                      properties:
                        cert:
                          type: string
                        key:
                          type: string
                versions:
                  $ref: '#/components/schemas/ManagedKafkaVersions'
                deleted:
                  type: boolean
              required:
                - deleted
    ManagedKafkaList:
      description: A list of ManagedKafka
      allOf:
        - $ref: '#/components/schemas/ListReference'
        - type: object
          example:
            kind: ManagedKafkaList
            items:
              $ref: '#/components/examples/ManagedKafkaExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ManagedKafka'
    ConnectorType:
      description: Represents a connector type supported by the API
      required:
        - name
        - openAPIV3Schema
        - version
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            name:
              description: Name of the connector type.
              type: string
            version:
              description: Version of the connector type.
              type: string
            description:
              description: A description of the connector.
              type: string
            json_schema:
              description: >-
                A json schema that can be used to validate a connectors
                connector_spec field.
              type: object
    ConnectorTypeList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ConnectorType'
    ConnectorList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Connector'
    WatchEvent:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        error:
          nullable: true
          $ref: '#/components/schemas/Error'
        object:
          type: object
          nullable: true
    ConnectorWatchEvent:
      allOf:
        - $ref: '#/components/schemas/WatchEvent'
        - type: object
          properties:
            object:
              nullable: true
              $ref: '#/components/schemas/Connector'
    Connector:
      description: >-
        A connector holds the configuration to connect a Kafka topic to another
        system.
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            metadata:
              type: object
              properties:
                kafka_id:
                  type: string
                owner:
                  type: string
                name:
                  type: string
                created_at:
                  format: date-time
                  type: string
                updated_at:
                  format: date-time
                  type: string
                resource_version:
                  type: integer
                  format: int64
            deployment_location:
              $ref: '#/components/schemas/ClusterTarget'
            connector_type_id:
              type: string
            connector_spec:
              type: object
            status:
              type: string
    ClusterTarget:
      discriminator:
        propertyName: kind
        mapping:
          addon: '#/components/schemas/AddonClusterTarget'
          cloud_provider: '#/components/schemas/CloudProviderClusterTarget'
      oneOf:
        - $ref: '#/components/schemas/AddonClusterTarget'
        - $ref: '#/components/schemas/CloudProviderClusterTarget'
    AddonClusterTarget:
      description: Targets workloads to an addon cluster
      type: object
      required:
        - kind
      properties:
        kind:
          type: string
        group:
          type: string
    CloudProviderClusterTarget:
      description: Targets workloads to a cloud provider
      type: object
      required:
        - kind
      properties:
        kind:
          type: string
        cloud_provider:
          type: string
        region:
          type: string
        multi_az:
          type: boolean
    AddonParameterList:
      description: A list of addon parameters
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/AddonParameter'
    AddonParameter:
      description: A addon parameter
      type: object
      properties:
        id:
          type: string
        value:
          type: string
    ConnectorCluster:
      description: Schema for the request to update a data plane cluster's status
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            metadata:
              type: object
              properties:
                owner:
                  type: string
                name:
                  type: string
                group:
                  type: string
                created_at:
                  format: date-time
                  type: string
                updated_at:
                  format: date-time
                  type: string
            service_account:
              type: string
            status:
              type: string
    ConnectorClusterList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ConnectorCluster'
    ConnectorClusterUpdateStatus:
      description: Schema for the request to update a data plane cluster's status
      type: object
      properties:
        status:
          type: string
    ConnectorUpdateStatus:
      description: Schema for the request to update a data plane cluster's status
      type: object
      properties:
        status:
          type: string
    DataPlaneClusterUpdateStatusRequest:
      description: Schema for the request to update a data plane cluster's status
      type: object
      properties:
        conditions:
          description: The cluster data plane conditions
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              reason:
                type: string
              message:
                type: string
              status:
                type: string
              lastTransitionTime:
                type: string
        total:
          type: object
          properties:
            ingressEgressThroughputPerSec:
              type: string
              nullable: true
            connections:
              type: integer
              nullable: true
            dataRetentionSize:
              type: string
              nullable: true
            partitions:
              type: integer
              nullable: true
        remaining:
          type: object
          properties:
            ingressEgressThroughputPerSec:
              type: string
              nullable: true
            connections:
              type: integer
              nullable: true
            dataRetentionSize:
              type: string
              nullable: true
            partitions:
              type: integer
              nullable: true
        nodeInfo:
          type: object
          properties:
            ceiling:
              type: integer
              nullable: true
            floor:
              type: integer
              nullable: true
            current:
              type: integer
              nullable: true
            currentWorkLoadMinimum:
              type: integer
              nullable: true
        resizeInfo:
          type: object
          properties:
            nodeDelta:
              type: integer
              nullable: true
            delta:
              type: object
              nullable: true
              properties:
                ingressEgressThroughputPerSec:
                  type: string
                  nullable: true
                connections:
                  type: integer
                  nullable: true
                dataRetentionSize:
                  type: string
                  nullable: true
                partitions:
                  type: integer
                  nullable: true
      example:
        $ref: '#/components/examples/DataPlaneClusterUpdateStatusRequestExample'
    DataPlaneKafkaStatus:
      description: Schema of the status object for a Kafka cluster
      type: object
      properties:
        conditions:
          description: The status conditions of a Kafka cluster
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              reason:
                type: string
              message:
                type: string
              status:
                type: string
              lastTransitionTime:
                type: string
        capacity:
          description: Capacity information of the data plane cluster
          type: object
          properties:
            ingressEgressThroughputPerSec:
              type: string
            totalMaxConnections:
              type: integer
            maxDataRetentionSize:
              type: string
            maxPartitions:
              type: integer
            maxDataRetentionPeriod:
              type: string
        versions:
          description: Version information related to a Kafka cluster
          type: object
          properties:
            kafka:
              type: string
            strimzi:
              type: string
    DataPlaneKafkaStatusUpdateRequest:
      description: >-
        Schema for the request to update the statuses of Kafka clusters from
        data plane
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DataPlaneKafkaStatus'
      example:
        $ref: '#/components/examples/DataPlaneKafkaUpdateStatusRequestExample'
    DataplaneClusterAgentConfig:
      description: Configuration for the data plane cluster agent
      type: object
      properties:
        spec:
          description: Data plane cluster agent spec
          type: object
          properties:
            observability:
              description: Observability configurations
              type: object
              properties:
                accessToken:
                  type: string
                channel:
                  type: string
                repository:
                  type: string
                tag:
                  type: string
    Metadata:
      description: |
        Version metadata.
      properties:
        server_version:
          description: |
            Version of the server.
          type: string
    AWS:
      description: |
        _Amazon Web Services_ specific settings of a cluster.
      properties:
        access_key_id:
          description: |
            AWS access key identifier.
          type: string
        account_id:
          description: |
            AWS account identifier.
          type: string
        secret_access_key:
          description: |
            AWS secret access key.
          type: string
        subnet_ids:
          description: |
            SubnetIDs are the subnet ids to be used when installing the cluster.
          type: array
          items:
            type: string
    AWSFlavour:
      description: |
        Specification for different classes of nodes inside a flavour.
      properties:
        compute_instance_type:
          description: >
            AWS default instance type for the worker volume.


            User can be overridden specifying in the cluster itself a type for
            compute node.
          type: string
        infra_instance_type:
          description: |
            AWS default instance type for the infra volume.
          type: string
        infra_volume:
          description: |
            Infra volume specification.
          $ref: '#/components/schemas/AWSVolume'
        master_instance_type:
          description: |
            AWS default instance type for the master volume.
          type: string
        master_volume:
          description: |
            Master volume specification.
          $ref: '#/components/schemas/AWSVolume'
        worker_volume:
          description: |
            Worker volume specification.
          $ref: '#/components/schemas/AWSVolume'
    AWSInfrastructureAccessRole:
      description: |
        A set of acces permissions for AWS resources
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be
            'AWSInfrastructureAccessRole' if this is a complete object or
            'AWSInfrastructureAccessRoleLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        description:
          description: |
            Description of the role.
          type: string
        display_name:
          description: |
            Human friendly identifier of the role, for example `Read only`.
          type: string
        state:
          description: |
            State of the role.
          $ref: '#/components/schemas/AWSInfrastructureAccessRoleState'
    AWSInfrastructureAccessRoleGrant:
      description: |
        Representation of an AWS infrastructure access role grant.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be
            'AWSInfrastructureAccessRoleGrant' if this is a complete object or
            'AWSInfrastructureAccessRoleGrantLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        console_url:
          description: |
            URL to switch to the role in AWS console.
          type: string
        role:
          description: |
            Link to AWS infrastructure access role.
            Grant must use a 'valid' role. 
          $ref: '#/components/schemas/AWSInfrastructureAccessRole'
        state:
          description: |
            State of the grant.
          $ref: '#/components/schemas/AWSInfrastructureAccessRoleGrantState'
        state_description:
          description: |
            Description of the state.
            Will be empty unless state is 'Failed'.
          type: string
        user_arn:
          description: |
            The user AWS IAM ARN we want to grant the role.
          type: string
    AWSInfrastructureAccessRoleGrantState:
      description: |
        State of an AWS infrastructure access role grant.
      type: string
      enum:
        - deleting
        - failed
        - pending
        - ready
        - removed
    AWSInfrastructureAccessRoleState:
      description: |
        State of an AWS infrastructure access role.
      type: string
      enum:
        - invalid
        - removed
        - valid
    AWSVolume:
      description: |
        Holds settings for an AWS storage volume.
      properties:
        iops:
          description: |
            Volume provisioned IOPS.
          type: integer
          format: int32
        size:
          description: |
            Volume size in Gib.
          type: integer
          format: int32
        type:
          description: |
            Volume Type

            Possible values are: 'io1', 'gp2', 'st1', 'sc1', 'standard'
          type: string
    CCS:
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'CCS' if this is a
            complete object or 'CCSLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        disable_scp_checks:
          description: |
            Indicates if cloud permissions checks are disabled,
            when attempting installation of the cluster.
          type: boolean
        enabled:
          description: |
            Indicates if Customer Cloud Subscription is enabled on the cluster.
          type: boolean
    CPUTotalNodeRoleOSMetricNode:
      description: >
        Representation of information from telemetry about a the CPU capacity by
        node role and OS.
      properties:
        cpu_total:
          description: >
            The total CPU capacity of nodes with this set of roles and operating
            system.
          type: number
          format: float
        node_roles:
          description: |
            Representation of the node role for a cluster.
          type: array
          items:
            type: string
        operating_system:
          description: |
            The operating system.
          type: string
        time:
          type: string
          format: date-time
    CPUTotalsNodeRoleOSMetricNode:
      description: >
        Representation of information from telemetry about the CPU capacity by
        node

        role and OS of a cluster.
      properties:
        cpu_totals:
          type: array
          items:
            $ref: '#/components/schemas/CPUTotalNodeRoleOSMetricNode'
    DNS:
      description: |
        DNS settings of the cluster.
      properties:
        base_domain:
          description: >
            Base DNS domain of the cluster.


            During the installation of the cluster it is necessary to create
            multiple DNS records.

            They will be created as sub-domains of this domain. For example, if
            the name of the

            cluster is `mycluster` and the base domain is `example.com` then the
            following DNS

            records will be created:


            ```

            mycluster-api.example.com

            mycluster-etcd-0.example.com

            mycluster-etcd-1.example.com

            mycluster-etcd-3.example.com

            ```


            The exact number, type and names of the created DNS record depends
            on the characteristics

            of the cluster, and may be different for different versions of
            _OpenShift_. Please don't

            rely on them. For example, to find what is the URL of the Kubernetes
            API server of the

            cluster don't assume that it will be `mycluster-api.example.com`.
            Instead of that use

            this API to retrieve the description of the cluster, and get it from
            the `api.url`

            attribute. For example, if the identifier of the cluster is `123`
            send a request like

            this:



            ```

            GET /api/clusters_mgmt/v1/clusters/123 HTTP/1.1

            ```


            That will return a response like this, including the `api.url`
            attribute:



            ```

            {
                "kind": "Cluster",
                "id": "123",
                "href": "/api/clusters_mgmt/v1/clusters/123",
                    "api": {
                    "url": "https://mycluster-api.example.com:6443"
                },
                ...
            }

            ```


            When the cluster is created in Amazon Web Services it is necessary
            to create this base

            DNS domain in advance, using AWS Route53
            (https://console.aws.amazon.com/route53).
          type: string
    GCP:
      description: |
        Google cloud platform settings of a cluster.
      properties:
        auth_uri:
          description: |
            GCP authentication uri
          type: string
        auth_provider_x509_cert_url:
          description: |
            GCP Authentication provider x509 certificate url
          type: string
        client_id:
          description: |
            GCP client identifier
          type: string
        client_x509_cert_url:
          description: |
            GCP client x509 certificate url
          type: string
        client_email:
          description: |
            GCP client email
          type: string
        private_key:
          description: |
            GCP private key
          type: string
        private_key_id:
          description: |
            GCP private key identifier
          type: string
        project_id:
          description: |
            GCP project identifier.
          type: string
        token_uri:
          description: |
            GCP token uri
          type: string
        type:
          description: |
            GCP the type of the service the key belongs to
          type: string
    GCPFlavour:
      description: |
        Specification for different classes of nodes inside a flavour.
      properties:
        compute_instance_type:
          description: >
            GCP default instance type for the worker volume.


            User can be overridden specifying in the cluster itself a type for
            compute node.
          type: string
        infra_instance_type:
          description: |
            GCP default instance type for the infra volume.
          type: string
        master_instance_type:
          description: |
            GCP default instance type for the master volume.
          type: string
    HTPasswdIdentityProvider:
      description: |
        Details for `htpasswd` identity providers.
      properties:
        password:
          description: |
            Password to be used in the _HTPasswd_ data file.
          type: string
        username:
          description: |
            Username to be used in the _HTPasswd_ data file.
          type: string
    LDAPAttributes:
      description: |
        LDAP attributes used to configure the LDAP identity provider.
      properties:
        id:
          description: |
            List of attributes to use as the identity.
          type: array
          items:
            type: string
        email:
          description: |
            List of attributes to use as the mail address.
          type: array
          items:
            type: string
        name:
          description: |
            List of attributes to use as the display name.
          type: array
          items:
            type: string
        preferred_username:
          description: >
            List of attributes to use as the preferred user name when
            provisioning a user.
          type: array
          items:
            type: string
    LDAPIdentityProvider:
      description: |
        Details for `ldap` identity providers.
      properties:
        ca:
          description: >
            Certificate bundle to use to validate server certificates for the
            configured URL.
          type: string
        url:
          description: >
            An https://tools.ietf.org/html/rfc2255[RFC 2255] URL which specifies
            the LDAP host and

            search parameters to use.
          type: string
        attributes:
          description: |
            LDAP attributes used to configure the provider.
          $ref: '#/components/schemas/LDAPAttributes'
        bind_dn:
          description: |
            Optional distinguished name to use to bind during the search phase.
          type: string
        bind_password:
          description: |
            Optional password to use to bind during the search phase.
          type: string
        insecure:
          description: >
            When `true` no TLS connection is made to the server. When `false`
            `ldaps://...` URLs

            connect using TLS and `ldap://...` are upgraded to TLS.
          type: boolean
    SSHCredentials:
      description: |
        SSH key pair of a cluster.
      properties:
        private_key:
          description: |
            SSH private key of the cluster.
          type: string
        public_key:
          description: |
            SSH public key of the cluster.
          type: string
    AddOn:
      description: |
        Representation of an add-on that can be installed in a cluster.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'AddOn' if this is a
            complete object or 'AddOnLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        description:
          description: |
            Description of the add-on.
          type: string
        docs_link:
          description: |
            Link to documentation about the add-on.
          type: string
        enabled:
          description: |
            Indicates if this add-on can be added to clusters.
          type: boolean
        has_external_resources:
          description: |
            Indicates if this add-on has external resources associated with it
          type: boolean
        hidden:
          description: |
            Indicates if this add-on is hidden.
          type: boolean
        icon:
          description: >
            Base64-encoded icon representing an add-on. The icon should be in
            PNG format.
          type: string
        install_mode:
          description: |
            The mode in which the addon is deployed.
          $ref: '#/components/schemas/AddOnInstallMode'
        label:
          description: >
            Label used to attach to a cluster deployment when add-on is
            installed.
          type: string
        name:
          description: |
            Name of the add-on.
          type: string
        operator_name:
          description: |
            The name of the operator installed by this add-on.
          type: string
        parameters:
          description: |
            List of parameters for this add-on.
          type: array
          items:
            $ref: '#/components/schemas/AddOnParameter'
        requirements:
          description: |
            List of requirements for this add-on.
          type: array
          items:
            $ref: '#/components/schemas/AddOnRequirement'
        resource_cost:
          description: >
            Used to determine how many units of quota an add-on consumes per
            resource name.
          type: number
          format: float
        resource_name:
          description: |
            Used to determine from where to reserve quota for this add-on.
          type: string
        sub_operators:
          description: |
            List of sub operators for this add-on.
          type: array
          items:
            $ref: '#/components/schemas/AddOnSubOperator'
        target_namespace:
          description: |
            The namespace in which the addon CRD exists.
          type: string
    AddOnInstallMode:
      description: |
        Representation of an add-on InstallMode field.
      type: string
      enum:
        - all_namespaces
        - single_namespace
    AddOnInstallation:
      description: |
        Representation of an add-on installation in a cluster.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'AddOnInstallation' if
            this is a complete object or 'AddOnInstallationLink' if it is just a
            link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        addon:
          description: |
            Link to add-on attached to this cluster.
          $ref: '#/components/schemas/AddOn'
        cluster:
          description: |
            ID used to identify the cluster that this add-on is attached to.
          $ref: '#/components/schemas/Cluster'
        creation_timestamp:
          description: >
            Date and time when the add-on was initially installed in the
            cluster.
          type: string
          format: date-time
        operator_version:
          description: |
            Version of the operator installed by the add-on.
          type: string
        parameters:
          description: |
            List of add-on parameters for this add-on installation.
          type: array
          items:
            $ref: '#/components/schemas/AddOnInstallationParameter'
        state:
          description: |
            Overall state of the add-on installation.
          $ref: '#/components/schemas/AddOnInstallationState'
        state_description:
          description: |
            Reason for the current State.
          type: string
        updated_timestamp:
          description: >
            Date and time when the add-on installation information was last
            updated.
          type: string
          format: date-time
    AddOnInstallationParameter:
      description: |
        Representation of an add-on installation parameter.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be
            'AddOnInstallationParameter' if this is a complete object or
            'AddOnInstallationParameterLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        value:
          description: |
            Value of the parameter.
          type: string
    AddOnInstallationState:
      description: |
        Representation of an add-on installation State field.
      type: string
      enum:
        - deleting
        - failed
        - installing
        - pending
        - ready
    AddOnParameter:
      description: |
        Representation of an add-on parameter.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'AddOnParameter' if this
            is a complete object or 'AddOnParameterLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        addon:
          description: |
            Link to add-on.
          $ref: '#/components/schemas/AddOn'
        default_value:
          description: |
            Indicates the value default for the add-on parameter
          type: string
        description:
          description: |
            Description of the add-on parameter.
          type: string
        editable:
          description: |
            Indicates if this parameter can be edited after creation.
          type: boolean
        enabled:
          description: |
            Indicates if this parameter is enabled for the add-on.
          type: boolean
        name:
          description: |
            Name of the add-on parameter.
          type: string
        required:
          description: |
            Indicates if this parameter is required by the add-on.
          type: boolean
        validation:
          description: |
            Validation rule for the add-on parameter.
          type: string
        value_type:
          description: |
            Type of value of the add-on parameter.
          type: string
    AddOnRequirement:
      description: |
        Representation of an add-on requirement.
      properties:
        id:
          description: |
            ID of the add-on requirement.
          type: string
        data:
          description: |
            Data for the add-on requirement.
          type: object
          additionalProperties:
            type: object
        enabled:
          description: |
            Indicates if this requirement is enabled for the add-on.
          type: boolean
        resource:
          description: |
            Type of resource of the add-on requirement.
          type: string
    AddOnSubOperator:
      description: |
        Representation of an add-on sub operator. A sub operator is an operator
        who's life cycle is controlled by the add-on umbrella operator. 
      properties:
        enabled:
          description: |
            Indicates if the sub operator is enabled for the add-on
          type: boolean
        operator_name:
          description: |
            Name of the add-on sub operator
          type: string
        operator_namespace:
          description: |
            Namespace of the add-on sub operator
          type: string
    AdminCredentials:
      description: >
        Temporary administrator credentials generated during the installation of
        the

        cluster.
      properties:
        password:
          description: |
            Cluster administrator password.
          type: string
        user:
          description: |
            Cluster administrator user name.
          type: string
    AlertInfo:
      description: |
        Provides information about a single alert firing on the cluster.
      properties:
        name:
          description: |
            The alert name. Multiple alerts with same name are possible.
          type: string
        severity:
          description: |
            The alert severity.
          $ref: '#/components/schemas/AlertSeverity'
    AlertSeverity:
      description: |
        Severity of a cluster alert received via telemetry.
      type: string
      enum:
        - critical
        - none
        - warning
    AlertsInfo:
      description: |
        Provides information about the alerts firing on the cluster.
      properties:
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/AlertInfo'
    BillingModel:
      description: |
        Billing model for cluster resources.
      type: string
      enum:
        - marketplace
        - standard
    CloudProvider1:
      description: |
        Cloud provider.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'CloudProvider' if this
            is a complete object or 'CloudProviderLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        display_name:
          description: >
            Name of the cloud provider for display purposes. It can contain any
            characters,

            including spaces.
          type: string
        name:
          description: |
            Human friendly identifier of the cloud provider, for example `aws`.
          type: string
    CloudRegion1:
      description: |
        Description of a region of a cloud provider.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'CloudRegion' if this is
            a complete object or 'CloudRegionLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        cloud_provider:
          description: |
            Link to the cloud provider that the region belongs to.
          $ref: '#/components/schemas/CloudProvider1'
        display_name:
          description: |
            Name of the region for display purposes, for example `N. Virginia`.
          type: string
        enabled:
          description: |
            Whether the region is enabled for deploying an OSD cluster.
          type: boolean
        name:
          description: >
            Human friendly identifier of the region, for example `us-east-1`.


            NOTE: Currently for all cloud providers and all regions `id` and
            `name` have exactly

            the same values.
          type: string
        supports_multi_az:
          description: |
            Whether the region supports multiple availability zones.
          type: boolean
    Cluster:
      description: >
        Definition of an _OpenShift_ cluster.


        The `cloud_provider` attribute is a reference to the cloud provider.
        When a

        cluster is retrieved it will be a link to the cloud provider, containing
        only

        the kind, id and href attributes:



        ```

        {
          "cloud_provider": {
            "kind": "CloudProviderLink",
            "id": "123",
            "href": "/api/clusters_mgmt/v1/cloud_providers/123"
          }
        }

        ```


        When a cluster is created this is optional, and if used it should
        contain the

        identifier of the cloud provider to use:



        ```

        {
          "cloud_provider": {
            "id": "123",
          }
        }

        ```


        If not included, then the cluster will be created using the default
        cloud

        provider, which is currently Amazon Web Services.


        The region attribute is mandatory when a cluster is created.


        The `aws.access_key_id`, `aws.secret_access_key` and `dns.base_domain`

        attributes are mandatory when creation a cluster with your own Amazon
        Web

        Services account.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'Cluster' if this is a
            complete object or 'ClusterLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        api:
          description: |
            Information about the API of the cluster.
          $ref: '#/components/schemas/ClusterAPI'
        aws:
          description: |
            Amazon Web Services settings of the cluster.
          $ref: '#/components/schemas/AWS'
        aws_infrastructure_access_role_grants:
          description: |
            List of AWS infrastructure access role grants on this cluster.
          type: array
          items:
            $ref: '#/components/schemas/AWSInfrastructureAccessRoleGrant'
        ccs:
          description: |
            Contains configuration of a Customer Cloud Subscription cluster.
          $ref: '#/components/schemas/CCS'
        dns:
          description: |
            DNS settings of the cluster.
          $ref: '#/components/schemas/DNS'
        gcp:
          description: |
            Google cloud platform settings of the cluster.
          $ref: '#/components/schemas/GCP'
        addons:
          description: |
            List of add-ons on this cluster.
          type: array
          items:
            $ref: '#/components/schemas/AddOnInstallation'
        billing_model:
          description: |
            Billing model for cluster resources.
          $ref: '#/components/schemas/BillingModel'
        cloud_provider:
          description: |
            Link to the cloud provider where the cluster is installed.
          $ref: '#/components/schemas/CloudProvider1'
        console:
          description: |
            Information about the console of the cluster.
          $ref: '#/components/schemas/ClusterConsole'
        creation_timestamp:
          description: |
            Date and time when the cluster was initially created, using the
            format defined in https://www.ietf.org/rfc/rfc3339.txt[RC3339].
          type: string
          format: date-time
        display_name:
          description: |
            Name of the cluster for display purposes. It can contain any
            characters, including spaces.
          type: string
        etcd_encryption:
          description: |
            Indicates whether that etcd is encrypted or not.
            This is set only during cluster creation.
          type: boolean
        expiration_timestamp:
          description: >
            Date and time when the cluster will be automatically deleted, using
            the format defined in

            https://www.ietf.org/rfc/rfc3339.txt[RFC3339]. If no timestamp is
            provided, the cluster

            will never expire.


            This option is unsupported.
          type: string
          format: date-time
        external_id:
          description: |
            External identifier of the cluster, generated by the installer.
          type: string
        external_configuration:
          description: |
            ExternalConfiguration shows external configuration on the cluster.
          $ref: '#/components/schemas/ExternalConfiguration'
        flavour:
          description: |
            Link to the _flavour_ that was used to create the cluster.
          $ref: '#/components/schemas/Flavour'
        groups:
          description: |
            Link to the collection of groups of user of the cluster.
          type: array
          items:
            $ref: '#/components/schemas/Group'
        health_state:
          description: |
            HealthState indicates the overall health state of the cluster.
          $ref: '#/components/schemas/ClusterHealthState'
        identity_providers:
          description: |
            Link to the collection of identity providers of the cluster.
          type: array
          items:
            $ref: '#/components/schemas/IdentityProvider'
        ingresses:
          description: |
            List of ingresses on this cluster.
          type: array
          items:
            $ref: '#/components/schemas/Ingress'
        load_balancer_quota:
          description: |
            Load Balancer quota to be assigned to the cluster.
          type: integer
          format: int32
        machine_pools:
          description: |
            List of machine pools on this cluster.
          type: array
          items:
            $ref: '#/components/schemas/MachinePool'
        managed:
          description: |
            Flag indicating if the cluster is managed (by Red Hat) or
            self-managed by the user.
          type: boolean
        metrics:
          description: |
            Cluster metrics received from telemetry.

            When provisioning a cluster this will be ignored.
          $ref: '#/components/schemas/ClusterMetrics'
        multi_az:
          description: |
            Flag indicating if the cluster should be created with nodes in
            different availability zones or all the nodes in a single one
            randomly selected.
          type: boolean
        name:
          description: |
            Name of the cluster. This name is assigned by the user when the
            cluster is created.
          type: string
        network:
          description: |
            Network settings of the cluster.
          $ref: '#/components/schemas/Network'
        node_drain_grace_period:
          description: |
            Node drain grace period.
          $ref: '#/components/schemas/Value'
        nodes:
          description: |
            Information about the nodes of the cluster.
          $ref: '#/components/schemas/ClusterNodes'
        openshift_version:
          description: >
            Version of _OpenShift_ installed in the cluster, for example
            `4.0.0-0.2`.


            When retrieving a cluster this will always be reported.


            When provisioning a cluster this will be ignored, as the version to

            deploy will be determined internally.
          type: string
        product:
          description: |
            Link to the product type of this cluster.
          $ref: '#/components/schemas/Product'
        properties:
          description: |
            User defined properties for tagging and querying.
          type: object
          additionalProperties:
            type: string
        provision_shard:
          description: >
            ProvisionShard contains the properties of the provision shard,
            including AWS and GCP related configurations
          $ref: '#/components/schemas/ProvisionShard'
        region:
          description: |
            Link to the cloud provider region where the cluster is installed.
          $ref: '#/components/schemas/CloudRegion1'
        state:
          description: |
            Overall state of the cluster.
          $ref: '#/components/schemas/ClusterState'
        status:
          description: |
            Status of cluster
          $ref: '#/components/schemas/ClusterStatus'
        storage_quota:
          description: |
            Storage quota to be assigned to the cluster.
          $ref: '#/components/schemas/Value'
        subscription:
          description: >
            Link to the subscription that comes from the account management
            service when the cluster

            is registered.
          $ref: '#/components/schemas/Subscription'
        upgrade_channel_group:
          description: >
            Channel group to be used for upgrading the cluster. Valid values:
            stable (default), fast, candidate, nightly.
          type: string
        version:
          description: >
            Link to the version of _OpenShift_ that will be used to install the
            cluster.
          $ref: '#/components/schemas/Version'
    ClusterAPI:
      description: |
        Information about the API of a cluster.
      properties:
        url:
          description: |
            The URL of the API server of the cluster.
          type: string
        listening:
          description: |
            The listening method of the API server.
          $ref: '#/components/schemas/ListeningMethod'
    ClusterConsole:
      description: |
        Information about the console of a cluster.
      properties:
        url:
          description: |
            The URL of the console of the cluster.
          type: string
    ClusterCredentials:
      description: |
        Credentials of the a cluster.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'ClusterCredentials' if
            this is a complete object or 'ClusterCredentialsLink' if it is just
            a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        ssh:
          description: |
            SSH key pair of the cluster.
          $ref: '#/components/schemas/SSHCredentials'
        admin:
          description: >
            Temporary administrator credentials generated during the
            installation

            of the cluster.
          $ref: '#/components/schemas/AdminCredentials'
        kubeconfig:
          description: |
            Administrator _kubeconfig_ file for the cluster.
          type: string
    ClusterHealthState:
      description: |
        ClusterHealthState indicates the health of a cluster.
      type: string
      enum:
        - healthy
        - unhealthy
        - unknown
    ClusterMetric:
      description: >
        Metric describing the total and used amount of some resource (like RAM,
        CPU and storage) in

        a cluster.
      properties:
        total:
          description: >
            Total amount of the resource that exists in the cluster. For example
            the total amount

            of RAM.
          $ref: '#/components/schemas/Value'
        updated_timestamp:
          description: |
            Collection timestamp of the metric.
          type: string
          format: date-time
        used:
          description: >
            Amount of the resource that is currently in use in the cluster. Fore
            example the amount

            of RAM in use.
          $ref: '#/components/schemas/Value'
    ClusterMetrics:
      description: |
        Cluster metrics received via telemetry.
      properties:
        cpu:
          description: |
            The amount of CPU provisioned and used in the cluster.
          $ref: '#/components/schemas/ClusterMetric'
        compute_nodes_cpu:
          description: >
            The amount of CPU provisioned and used in the cluster by compute
            nodes.
          $ref: '#/components/schemas/ClusterMetric'
        compute_nodes_memory:
          description: >
            The amount of memory provisioned and used in the cluster by compute
            nodes.
          $ref: '#/components/schemas/ClusterMetric'
        compute_nodes_sockets:
          description: >
            The amount of sockets provisioned and used in the cluster by compute
            nodes.
          $ref: '#/components/schemas/ClusterMetric'
        critical_alerts_firing:
          description: >
            CriticalAlertsFiring contains information about critical alerts
            firing.
          type: integer
          format: int32
        memory:
          description: |
            The amount of memory provisioned and used in the cluster.
          $ref: '#/components/schemas/ClusterMetric'
        nodes:
          description: |
            The number of nodes provisioned for the cluster.
          $ref: '#/components/schemas/ClusterNodes'
        operators_condition_failing:
          description: >
            OperatorsConditionFailing contains information about operator in
            failing condition in the cluster.
          type: integer
          format: int32
        sockets:
          description: |
            The amount of sockets provisioned and used in the cluster.
          $ref: '#/components/schemas/ClusterMetric'
        storage:
          description: |
            The amount of storage provisioned and used in the cluster.

            WARNING: This isn't currently populated.
          $ref: '#/components/schemas/ClusterMetric'
    ClusterNodes:
      description: |
        Counts of different classes of nodes inside a cluster.
      properties:
        autoscale_compute:
          description: |
            Details for auto-scaling the compute machine pool.
            Compute and AutoscaleCompute cannot be used together.    
          $ref: '#/components/schemas/MachinePoolAutoscaling'
        availability_zones:
          description: |
            The availability zones upon which the nodes are created.
          type: array
          items:
            type: string
        compute:
          description: |
            Number of compute nodes of the cluster.
            Compute and AutoscaleCompute cannot be used together.    
          type: integer
          format: int32
        compute_labels:
          description: |
            The labels set on the "default" compute machine pool.
          type: object
          additionalProperties:
            type: string
        compute_machine_type:
          description: |
            The compute machine type to use, for example `r5.xlarge`.
          $ref: '#/components/schemas/MachineType'
        infra:
          description: |
            Number of infrastructure nodes of the cluster.
          type: integer
          format: int32
        master:
          description: |
            Number of master nodes of the cluster.
          type: integer
          format: int32
        total:
          description: |
            Total number of nodes of the cluster.
          type: integer
          format: int32
    ClusterOperatorInfo:
      properties:
        condition:
          description: |
            Operator status.  Empty string if unknown.
          $ref: '#/components/schemas/ClusterOperatorState'
        name:
          description: |
            Name of the operator.
          type: string
        reason:
          description: |
            Extra detail on condition, if available.  Empty string if unknown.
          type: string
        time:
          description: >
            Time when the sample was obtained, in
            [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
          type: string
          format: date-time
        version:
          description: |
            Current version of the operator.  Empty string if unknown.
          type: string
    ClusterOperatorState:
      description: |
        Overall state of a cluster operator.
      type: string
      enum:
        - available
        - degraded
        - failing
        - upgrading
    ClusterOperatorsInfo:
      description: >
        Provides detailed information about the operators installed on the
        cluster.
      properties:
        operators:
          type: array
          items:
            $ref: '#/components/schemas/ClusterOperatorInfo'
    ClusterRegistration:
      description: |
        Registration of a new cluster to the service.
      properties:
        external_id:
          description: |
            Identifier of the cluster generated by the installer.

            For example, to register a cluster that has been provisioned outside
            of this service, send a a request like this:


            ```
            POST /api/clusters_mgmt/v1/register_cluster HTTP/1.1
            ```

            With a request body like this:


            ```
            {
              "external_id": "d656aecf-11a6-4782-ad86-8f72638449ba"
            }
            ```
          type: string
        organization_id:
          description: |
            Optional Organization identifier of the cluster generated by the
            account manager.
          type: string
        subscription_id:
          description: |
            Subscription identifier of the cluster generated by the account
            manager.
          type: string
    ClusterState:
      description: |
        Overall state of a cluster.
      type: string
      enum:
        - error
        - installing
        - pending
        - ready
        - uninstalling
        - unknown
    ClusterStatus:
      description: |
        Detailed status of a cluster.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'ClusterStatus' if this
            is a complete object or 'ClusterStatusLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        dns_ready:
          description: |
            DNSReady from Provisioner
          type: boolean
        description:
          description: |
            Detailed description of the cluster status.
          type: string
        provision_error_code:
          description: |
            Provisioning Error Code
          type: string
        provision_error_message:
          description: |
            Provisioning Error Message
          type: string
        state:
          description: |
            The overall state of the cluster.
          $ref: '#/components/schemas/ClusterState'
    Dashboard:
      description: |
        Collection of metrics intended to render a graphical dashboard.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'Dashboard' if this is a
            complete object or 'DashboardLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        metrics:
          description: |
            Metrics included in the dashboard.
          type: array
          items:
            $ref: '#/components/schemas/Metric'
        name:
          description: |
            Name of the dashboard.
          type: string
    ExternalConfiguration:
      description: |
        Representation of cluster external configuration.
      properties:
        labels:
          description: |
            list of labels externally configured on the clusterdeployment.
          type: array
          items:
            $ref: '#/components/schemas/Label'
        syncsets:
          description: |
            list of syncsets externally configured on the cluster.
          type: array
          items:
            $ref: '#/components/schemas/Syncset'
    Flavour:
      description: >
        Set of predefined properties of a cluster. For example, a _huge_ flavour
        can be a cluster

        with 10 infra nodes and 1000 compute nodes.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'Flavour' if this is a
            complete object or 'FlavourLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        aws:
          description: |
            Default _Amazon Web Services_ settings of the cluster.
          $ref: '#/components/schemas/AWSFlavour'
        gcp:
          description: |
            Default _Google Cloud Platform_ settings of the cluster.
          $ref: '#/components/schemas/GCPFlavour'
        name:
          description: >
            Human friendly identifier of the cluster, for example `4`.


            NOTE: Currently for all flavours the `id` and `name` attributes have
            exactly the

            same values.
          type: string
        network:
          description: >
            Default network settings of the cluster.


            These can be overridden specifying in the cluster itself a different
            set of settings.
          $ref: '#/components/schemas/Network'
        nodes:
          description: >
            Number of nodes that will be used by default when creating a cluster
            that uses

            this flavour.


            These can be overridden specifying in the cluster itself a different
            number of nodes.
          $ref: '#/components/schemas/FlavourNodes'
    FlavourNodes:
      description: |
        Counts of different classes of nodes inside a flavour.
      properties:
        master:
          description: |
            Number of master nodes of the cluster.
          type: integer
          format: int32
    GithubIdentityProvider:
      description: |
        Details for `github` identity providers.
      properties:
        ca:
          description: >
            Optional trusted certificate authority bundle to use when making
            requests tot he server.
          type: string
        client_id:
          description: |
            Client identifier of a registered _GitHub_ OAuth application.
          type: string
        client_secret:
          description: |
            Client secret of a registered _GitHub_ OAuth application.
          type: string
        hostname:
          description: >
            For _GitHub Enterprise_ you must provide the host name of your
            instance, such as

            `example.com`. This value must match the _GitHub Enterprise_ host
            name value in the

            `/setup/settings` file and cannot include a port number.


            For plain _GitHub_ omit this parameter.
          type: string
        organizations:
          description: >
            Optional list of organizations. Cannot be used in combination with
            the Teams field.
          type: array
          items:
            type: string
        teams:
          description: >
            Optional list of teams. Cannot be used in combination with the
            Organizations field.
          type: array
          items:
            type: string
    GitlabIdentityProvider:
      description: |
        Details for `gitlab` identity providers.
      properties:
        ca:
          description: >
            Optional trusted certificate authority bundle to use when making
            requests tot he server.
          type: string
        url:
          description: |
            URL of the _GitLab_ instance.
          type: string
        client_id:
          description: |
            Client identifier of a registered _GitLab_ OAuth application.
          type: string
        client_secret:
          description: |
            Client secret issued by _GitLab_.
          type: string
    GoogleIdentityProvider:
      description: |
        Details for `google` identity providers.
      properties:
        client_id:
          description: |
            Client identifier of a registered _Google_ project.
          type: string
        client_secret:
          description: |
            Client secret issued by _Google_.
          type: string
        hosted_domain:
          description: |
            Optional hosted domain to restrict sign-in accounts to.
          type: string
    Group:
      description: |
        Representation of a group of users.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'Group' if this is a
            complete object or 'GroupLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        users:
          description: |
            List of users of the group.
          type: array
          items:
            $ref: '#/components/schemas/User'
    IdentityProvider:
      description: |
        Representation of an identity provider.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'IdentityProvider' if
            this is a complete object or 'IdentityProviderLink' if it is just a
            link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        ldap:
          description: |
            Details for `ldap` identity providers.
          $ref: '#/components/schemas/LDAPIdentityProvider'
        challenge:
          description: >
            When `true` unauthenticated token requests from non-web clients
            (like the CLI) are sent a

            `WWW-Authenticate` challenge header for this provider.
          type: boolean
        github:
          description: |
            Details for `github` identity providers.
          $ref: '#/components/schemas/GithubIdentityProvider'
        gitlab:
          description: |
            Details for `gitlab` identity providers.
          $ref: '#/components/schemas/GitlabIdentityProvider'
        google:
          description: |
            Details for `google` identity providers.
          $ref: '#/components/schemas/GoogleIdentityProvider'
        htpasswd:
          description: |
            Details for `htpasswd` identity providers.
          $ref: '#/components/schemas/HTPasswdIdentityProvider'
        login:
          description: >
            When `true` unauthenticated token requests from web clients (like
            the web console) are

            redirected to the authorize URL to log in.
          type: boolean
        mapping_method:
          description: >
            Controls how mappings are established between this provider's
            identities and user

            objects.
          $ref: '#/components/schemas/IdentityProviderMappingMethod'
        name:
          description: |
            The name of the identity provider.
          type: string
        open_id:
          description: |
            Details for `openid` identity providers.
          $ref: '#/components/schemas/OpenIDIdentityProvider'
        type:
          description: >
            Type of identity provider. The rest of the attributes will be
            populated according to this

            value. For example, if the type is `github` then only the `github`
            attribute will be

            populated.
          $ref: '#/components/schemas/IdentityProviderType'
    IdentityProviderMappingMethod:
      description: >
        Controls how mappings are established between provider identities and
        user objects.
      type: string
      enum:
        - add
        - claim
        - generate
        - lookup
    IdentityProviderType:
      description: |
        Type of identity provider.
      type: string
      enum:
        - ldap
        - github
        - gitlab
        - google
        - htpasswd
        - open_id
    Ingress:
      description: |
        Representation of an ingress.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'Ingress' if this is a
            complete object or 'IngressLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        dns_name:
          description: |
            DNS Name of the ingress.
          type: string
        cluster:
          description: |
            ID used to identify the cluster that this ingress is attached to. 
          $ref: '#/components/schemas/Cluster'
        default:
          description: |
            Indicates if this is the default ingress.
          type: boolean
        listening:
          description: |
            Listening method of the ingress
          $ref: '#/components/schemas/ListeningMethod'
        route_selectors:
          description: |
            A set of labels for the ingress. 
          type: object
          additionalProperties:
            type: string
    Label:
      description: |
        Representation of a label in clusterdeployment.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'Label' if this is a
            complete object or 'LabelLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        key:
          description: |
            the key of the label
          type: string
        value:
          description: |
            the value to set in the label
          type: string
    ListeningMethod:
      description: |
        Cluster components listening method.
      type: string
      enum:
        - external
        - internal
    Log:
      description: |
        Log of the cluster.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'Log' if this is a
            complete object or 'LogLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        content:
          description: |
            Content of the log.
          type: string
    MachinePool:
      description: |
        Representation of a machine pool in a cluster.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'MachinePool' if this is
            a complete object or 'MachinePoolLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        autoscaling:
          description: |
            Details for auto-scaling the machine pool.
            Replicas and autoscaling cannot be used together.    
          $ref: '#/components/schemas/MachinePoolAutoscaling'
        availability_zones:
          description: |
            The availability zones upon which the nodes are created.
          type: array
          items:
            type: string
        cluster:
          description: >
            ID used to identify the cluster that this machinepool is attached
            to.
          $ref: '#/components/schemas/Cluster'
        instance_type:
          description: |
            The instance type of Nodes to create.
          type: string
        labels:
          description: |
            The labels set on the Nodes created.
          type: object
          additionalProperties:
            type: string
        replicas:
          description: |
            The number of Machines (and Nodes) to create.
            Replicas and autoscaling cannot be used together.    
          type: integer
          format: int32
        taints:
          description: |
            The taints set on the Nodes created.
          type: array
          items:
            $ref: '#/components/schemas/Taint'
    MachinePoolAutoscaling:
      description: |
        Representation of a autoscaling in a machine pool.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'MachinePoolAutoscaling'
            if this is a complete object or 'MachinePoolAutoscalingLink' if it
            is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        max_replicas:
          description: |
            The maximum number of replicas for the machine pool.
          type: integer
          format: int32
        min_replicas:
          description: |
            The minimum number of replicas for the machine pool.
          type: integer
          format: int32
    MachineType:
      description: |
        Machine type.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'MachineType' if this is
            a complete object or 'MachineTypeLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        cpu:
          description: |
            The amount of cpu's of the machine type.
          $ref: '#/components/schemas/Value'
        category:
          description: |
            The category which the machine type is suitable for.
          $ref: '#/components/schemas/MachineTypeCategory'
        cloud_provider:
          description: |
            Link to the cloud provider that the machine type belongs to.
          $ref: '#/components/schemas/CloudProvider1'
        memory:
          description: |
            The amount of memory of the machine type.
          $ref: '#/components/schemas/Value'
        name:
          description: >
            Human friendly identifier of the machine type, for example
            `r5.xlarge - Memory Optimized`.
          type: string
        size:
          description: |
            The size of the machine type.
          $ref: '#/components/schemas/MachineTypeSize'
    MachineTypeCategory:
      description: |
        Machine type category.
      type: string
      enum:
        - compute_optimized
        - general_purpose
        - memory_optimized
    MachineTypeSize:
      description: |
        Machine type size.
      type: string
      enum:
        - large
        - medium
        - small
    Metric:
      description: |
        Metric included in a dashboard.
      properties:
        name:
          description: |
            Name of the metric.
          type: string
        vector:
          description: |
            Samples of the metric.
          type: array
          items:
            $ref: '#/components/schemas/Sample'
    Network:
      description: |
        Network configuration of a cluster.
      properties:
        host_prefix:
          description: |
            Network host prefix which is defaulted to `23` if not specified.
          type: integer
          format: int32
        machine_cidr:
          description: >
            IP address block from which to assign machine IP addresses, for
            example `10.0.0.0/16`.
          type: string
        pod_cidr:
          description: >
            IP address block from which to assign pod IP addresses, for example
            `10.128.0.0/14`.
          type: string
        service_cidr:
          description: >
            IP address block from which to assign service IP addresses, for
            example `172.30.0.0/16`.
          type: string
    NodeInfo:
      description: |
        Provides information about a node from specific type in the cluster.
      properties:
        amount:
          description: |
            The amount of the nodes from this type.
          type: integer
          format: int32
        type:
          description: |
            The Node type.
          $ref: '#/components/schemas/NodeType'
    NodeType:
      description: |
        Type of node received via telemetry.
      type: string
      enum:
        - compute
        - infra
        - master
    NodesInfo:
      description: |
        Provides information about the nodes in the cluster.
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/NodeInfo'
    OpenIDClaims:
      description: |
        _OpenID_ identity provider claims.
      properties:
        email:
          description: |
            List of claims to use as the mail address.
          type: array
          items:
            type: string
        name:
          description: |
            List of claims to use as the display name.
          type: array
          items:
            type: string
        preferred_username:
          description: >
            List of claims to use as the preferred user name when provisioning a
            user.
          type: array
          items:
            type: string
    OpenIDIdentityProvider:
      description: |
        Details for `openid` identity providers.
      properties:
        ca:
          description: >
            Certificate bunde to use to validate server certificates for the
            configured URL.
          type: string
        claims:
          description: |
            Claims used to configure the provider.
          $ref: '#/components/schemas/OpenIDClaims'
        client_id:
          description: |
            Identifier of a client registered with the _OpenID_ provider.
          type: string
        client_secret:
          description: |
            Client secret.
          type: string
        extra_authorize_parameters:
          description: >
            Optional map of extra parameters to add to the authorization token
            request.
          type: object
          additionalProperties:
            type: string
        extra_scopes:
          description: >
            Optional list of scopes to request, in addition to the `openid`
            scope, during the

            authorization token request.
          type: array
          items:
            type: string
        issuer:
          description: |
            The URL that the OpenID Provider asserts as the Issuer Identifier
          type: string
    Product:
      description: |
        Representation of an product that can be selected as a cluster type.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'Product' if this is a
            complete object or 'ProductLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        name:
          description: |
            Name of the product.
          type: string
    ProvisionShard:
      description: >
        Contains the properties of the provision shard, including AWS and GCP
        related configurations
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'ProvisionShard' if this
            is a complete object or 'ProvisionShardLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        aws_account_operator_config:
          description: |
            Contains the configuration for the AWS account operator
          $ref: '#/components/schemas/ServerConfig'
        aws_base_domain:
          description: |
            Contains the AWS base domain
          type: string
        gcp_base_domain:
          description: |
            Contains the GCP base domain
          type: string
        gcp_project_operator:
          description: |
            Contains the configuration for the GCP project operator
          $ref: '#/components/schemas/ServerConfig'
        hive_config:
          description: |
            Contains the configuration for Hive
          $ref: '#/components/schemas/ServerConfig'
    Sample:
      description: |
        Sample of a metric.
      properties:
        time:
          description: |
            Time when the sample was obtained.
          type: string
          format: date-time
        value:
          description: |
            Numeric value of the sample.
          type: number
          format: float
    ServerConfig:
      description: |
        Representation of a server config
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'ServerConfig' if this is
            a complete object or 'ServerConfigLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        server:
          description: |
            The URL of the server
          type: string
    SocketTotalNodeRoleOSMetricNode:
      description: |
        Representation of information from telemetry about a the socket capacity
        by node role and OS.
      properties:
        node_roles:
          description: |
            Representation of the node role for a cluster.
          type: array
          items:
            type: string
        operating_system:
          description: |
            The operating system.
          type: string
        socket_total:
          description: >
            The total socket capacity of nodes with this set of roles and
            operating system.
          type: number
          format: float
        time:
          type: string
          format: date-time
    SocketTotalsNodeRoleOSMetricNode:
      description: >
        Representation of information from telemetry about the socket capacity
        by node

        role and OS of a cluster.
      properties:
        socket_totals:
          type: array
          items:
            $ref: '#/components/schemas/SocketTotalNodeRoleOSMetricNode'
    Subscription:
      description: |
        Definition of a subscription.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'Subscription' if this is
            a complete object or 'SubscriptionLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
    Syncset:
      description: |
        Representation of a syncset.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'Syncset' if this is a
            complete object or 'SyncsetLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        resources:
          description: |
            List of k8s objects to configure for the cluster.
          type: array
          items:
            type: object
    Taint:
      description: |
        Representation of a Taint set on a MachinePool in a cluster.
      properties:
        effect:
          description: >
            The effect on the node for the pods matching the taint, i.e:
            NoSchedule, NoExecute, PreferNoSchedule.
          type: string
        key:
          description: |
            The key for the taint
          type: string
        value:
          description: |
            The value for the taint.
          type: string
    UpgradePolicy:
      description: |
        Representation of an upgrade policy that can be set for a cluster.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'UpgradePolicy' if this
            is a complete object or 'UpgradePolicyLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        cluster_id:
          description: |
            Cluster ID this upgrade policy is defined for.
          type: string
        next_run:
          description: |
            Next time the upgrade should run.
          type: string
          format: date-time
        schedule:
          description: |
            Schedule cron expression that defines automatic upgrade scheduling.
          type: string
        schedule_type:
          description: >
            Schedule type can be either "manual" (single execution) or
            "automatic" (re-occurring).
          type: string
        upgrade_type:
          description: |
            Upgrade type specify the type of the upgrade. Can be "OSD" or "CVE".
          type: string
        version:
          description: |
            Version is the desired upgrade version.
          type: string
    UpgradePolicyState:
      description: >
        Representation of an upgrade policy state that that is set for a
        cluster.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'UpgradePolicyState' if
            this is a complete object or 'UpgradePolicyStateLink' if it is just
            a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        description:
          description: |
            Description of the state.
          type: string
        value:
          description: >
            State value, can be 'pending', 'started', 'delayed', 'failed' or
            'completed'.
          type: string
    User:
      description: |
        Representation of a user.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'User' if this is a
            complete object or 'UserLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
    Value:
      description: >
        Numeric value and the unit used to measure it.


        Units are not mandatory, and they're not specified for some resources.
        For

        resources that use bytes, the accepted units are:


        - 1 B = 1 byte

        - 1 KB = 10^3 bytes

        - 1 MB = 10^6 bytes

        - 1 GB = 10^9 bytes

        - 1 TB = 10^12 bytes

        - 1 PB = 10^15 bytes


        - 1 B = 1 byte

        - 1 KiB = 2^10 bytes

        - 1 MiB = 2^20 bytes

        - 1 GiB = 2^30 bytes

        - 1 TiB = 2^40 bytes

        - 1 PiB = 2^50 bytes
      properties:
        unit:
          description: |
            Name of the unit used to measure the value.
          type: string
        value:
          description: |
            Numeric value.
          type: number
          format: float
    Version:
      description: |
        Representation of an _OpenShift_ version.
      properties:
        kind:
          description: >
            Indicates the type of this object. Will be 'Version' if this is a
            complete object or 'VersionLink' if it is just a link.
          type: string
        id:
          description: |
            Unique identifier of the object.
          type: string
        href:
          description: |
            Self link.
          type: string
        rosa_enabled:
          description: >
            ROSAEnabled indicates whether this version can be used to create
            ROSA clusters.
          type: boolean
        available_upgrades:
          description: >
            AvailableUpgrades is the list of versions this version can be
            upgraded to.
          type: array
          items:
            type: string
        channel_group:
          description: >
            ChannelGroup is the name of the group where this image belongs.

            ChannelGroup is a mechanism to partition the images to different
            groups,

            each image belongs to only a single group.
          type: string
        default:
          description: >
            Indicates if this should be selected as the default version when a
            cluster is created

            without specifying explicitly the version.
          type: boolean
        enabled:
          description: |
            Indicates if this version can be used to create clusters.
          type: boolean
        raw_id:
          description: |
            RawID is the id of the version - without channel group and prefix.
          type: string
    Error1:
      type: object
      properties:
        kind:
          description: |
            Indicates the type of this object. Will always be 'Error'
          type: string
        id:
          description: |
            Numeric identifier of the error.
          type: integer
          format: int32
        href:
          description: |
            Self link.
          type: string
        code:
          description: >
            Globally unique code of the error, composed of the unique identifier
            of the API and the numeric identifier of the error. For example, for
            if the numeric identifier of the error is `93` and the identifier of
            the API is `clusters_mgmt` then the code will be `CLUSTERS-MGMT-93`.
          type: string
        reason:
          description: |
            Human readable description of the error.
          type: string
        details:
          description: |
            Extra information about the error.
          type: object
          additionalProperties: 'true'
  parameters:
    id:
      name: id
      description: The id of record
      schema:
        type: string
      in: path
      required: true
    duration:
      name: duration
      in: query
      description: The length of time in minutes over which to return the metrics.
      required: true
      schema:
        type: integer
        format: int64
        default: 5
        minimum: 1
        maximum: 4320
      examples:
        duration:
          value: 5
    interval:
      name: interval
      in: query
      description: The interval in seconds between data points.
      required: true
      schema:
        type: integer
        format: int64
        default: 30
        minimum: 1
        maximum: 10800
      examples:
        interval:
          value: 30
    filters:
      name: filters
      in: query
      description: >-
        List of metrics to fetch. Fetch all metrics when empty. List entries are
        kafka internal metric names.
      schema:
        type: array
        items:
          type: string
        default: []
    page:
      name: page
      in: query
      description: Page index
      required: false
      schema:
        type: string
      examples:
        page:
          value: '1'
    size:
      name: size
      in: query
      description: Number of items in each page
      required: false
      schema:
        type: string
      examples:
        size:
          value: '100'
    orderBy:
      description: >-
        Specifies the order by criteria. The syntax of this parameter is

        similar to the syntax of the _order by_ clause of an SQL statement.

        Each query can be ordered by any of the kafkaRequests fields.

        For example, in order to retrieve all kafkas ordered by their name:


        ```sql

        name asc

        ```


        Or in order to retrieve all kafkas ordered by their name _and_ created
        date:


        ```sql

        name asc, created_at asc

        ```


        If the parameter isn't provided, or if the value is empty, then

        the results will be ordered by name.
      explode: true
      examples:
        orderBy:
          value: name asc
      in: query
      name: orderBy
      required: false
      schema:
        type: string
      style: form
    search:
      description: >
        Search criteria.


        The syntax of this parameter is similar to the syntax of the _where_
        clause of an

        SQL statement. Allowed fields in the search are: cloud_provider, name,
        owner, region and status. Allowed comparators are `<>`, `=` or `LIKE`.

        Allowed joins are `AND` and `OR`, however there is a limit of max 10
        joins in the search query.


        Examples:


        To retrieve kafka request with name equal `my-kafka` and region equal
        `aws`, the value should be:


        ```

        name = my-kafka and cloud_provider = aws

        ```


        To retrieve kafka request with its name starting with `my`, the value
        should be:


        ```

        name like my%25

        ```


        If the parameter isn't provided, or if the value is empty, then all the
        kafkas

        that the user has permission to see will be returned.


        Note. If the query is invalid, an error will be returned
      explode: true
      name: search
      in: query
      required: false
      examples:
        search:
          value: name = my-kafka and cloud_provider = aws
      schema:
        type: string
      style: form
  examples:
    USRegionExample:
      value:
        region: us-east-1
        cloud_provider: aws
        name: serviceapitest
    EURegionExample:
      value:
        region: eu-west-1
        cloud_provider: aws
        name: serviceapitest
    KafkaRequestExample:
      value:
        id: 1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        kind: kafka
        href: /api/managed-services-api/v1/kafkas/1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        status: ready
        cloud_provider: aws
        multi_az: true
        region: us-east-1
        owner: api_kafka_service
        name: serviceapi
        bootstrapServerHost: >-
          serviceapi-1isy6rq3jki8q0otmjqfd3ocfrg.apps.ms-bttg0jn170hp.x5u8.s1.devshift.org
        created_at: '2020-10-05T12:51:24.053142Z'
        updated_at: '2020-10-05T12:56:36.362208Z'
        version: 2.6.0
    KafkaRequestFailedCreationStatusExample:
      value:
        id: 1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        kind: kafka
        href: /api/managed-services-api/v1/kafkas/1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        status: failed
        cloud_provider: aws
        multi_az: true
        region: us-east-1
        owner: api_kafka_service
        name: serviceapi
        bootstrapServerHost: >-
          serviceapi-1isy6rq3jki8q0otmjqfd3ocfrg.apps.ms-bttg0jn170hp.x5u8.s1.devshift.org
        created_at: '2020-10-05T12:51:24.053142Z'
        updated_at: '2020-10-05T12:56:36.362208Z'
        failed_reason: a reason the kafka request creation failed
    CloudProviderExample:
      value:
        kind: CloudProvider
        id: aws
        name: aws
        display_name: Amazon Web Services
        enabled: true
    CloudRegionExample:
      value:
        kind: CloudRegion
        id: us-east-1
        display_name: 'US East, N. Virginia'
        enabled: true
    ServiceAccountRequestExample:
      value:
        name: my-app-sa
        description: service account for my app
    ServiceAccountExample:
      value:
        id: '1'
        kind: ServiceAccount
        href: /api/managed-services-api/v1/serviceaccounts/1
        name: my-app-sa
        description: service account for my app
        clientID: SA-121212
        clientSecret: secret
        owner: test-user
    ServiceAccountByIdExample:
      value:
        id: '1'
        kind: ServiceAccount
        href: /api/managed-services-api/v1/serviceaccounts/1
        name: my-app-sa
        description: service account for my app
        clientID: SA-121212
        owner: test-user
    ServiceAccountListItemExample:
      value:
        id: '1'
        kind: ServiceAccountListItem
        href: /api/managed-services-api/v1/serviceaccounts/1
        name: my-app-sa
        description: service account for my app
        clientID: SA-121212
        owner: test-user
    MetricsRangeQueryExample:
      value:
        metric:
          __name__: kafka_server_brokertopicmetrics_bytes_in_total
          strimzi_io_cluster: kafka-service
          topic: __consumer_offsets
        values:
          - Timestamp: 1611670230000
            Value: 84154
          - Timestamp: 1611670260000
            Value: 85888
          - Timestamp: 1611670290000
            Value: 87622
    MetricsInstantQueryExample:
      value:
        metric:
          __name__: kafka_server_brokertopicmetrics_bytes_in_total
          strimzi_io_cluster: kafka-service
          topic: __consumer_offsets
        Timestamp: 1611670230000
        Value: 84154
    400DeletionExample:
      value:
        id: '103'
        kind: Error
        href: /api/managed-services-api/v1/errors/103
        code: MGD-SERV-API-103
        reason: 'Synchronous action is not supported, use async=true parameter'
        operation_id: 1iWIimqGcrDuL61aUxIZqBTqNRa
    400CreationExample:
      value:
        id: '103'
        kind: Error
        href: /api/managed-services-api/v1/errors/103
        code: MGD-SERV-API-103
        reason: 'Synchronous action is not supported, use async=true parameter'
        operation_id: 1iWIimqGcrDuL61aUxIZqBTqNRa
    400InvalidQueryExample:
      value:
        id: '203'
        kind: Error
        href: /api/managed-services-api/v1/errors/23
        code: MGD-SERV-API-23
        reason: >-
          Failed to parse search query: Unable to list kafka requests for
          api_kafka_service: MGD-SERV-API-23: Failed to parse search query:
          Unsupported column name for search: 'id'. Supported column names are:
          region, name, cloud_provider, name, status. Query invalid: id = 123
        operation_id: 1lWDGuybIrEnxrAem724gqkkiDv
    404Example:
      value:
        id: '404'
        kind: Error
        href: /api/managed-services-api/v1/errors/7
        code: MGD-SERV-API-7
        reason: The requested resource doesn't exist
    404DeleteExample:
      value:
        id: '7'
        kind: Error
        href: /api/managed-services-api/v1/errors/7
        code: MGD-SERV-API-7
        reason: KafkaResource with id='1iK3duVYIvv5YvLlyz1mGR3JyqN' not found
        operation_id: 1iYO7g2g6HTdUKUa2ksH82kQD3y
    401Example:
      value:
        id: '11'
        kind: Error
        href: /api/managed-services-api/v1/errors/11
        code: MGD-SERV-API-11
        reason: 'Unable to verify JWT token: Required authorization token not found'
        operation_id: 1iY3UhEhwmXBpWPfI2lNekpd4ZD
    403Example:
      value:
        id: '4'
        kind: Error
        href: /api/managed-services-api/v1/errors/4
        code: MGD-SERV-API-4
        reason: User 'foo-bar' is not authorized to access the service.
        operation_id: 1lY3UiEhznXBpWPfI2lNejpd4YC
    403MaxAllowedInstanceReachedExample:
      value:
        id: '5'
        kind: Error
        href: /api/managed-services-api/v1/errors/5
        code: MGD-SERV-API-5
        reason: User 'foo-bar' has reached a maximum number of 6 allowed instances.
        operation_id: 1lY3UiEkxnXBpVPeI2oNejd3XB
    409NameConflictExample:
      value:
        id: '36'
        kind: Error
        href: /api/managed-services-api/v1/errors/36
        code: MGD-SERV-API-36
        reason: Kafka cluster name is already used
        operation_id: 6kY0UiEkzkXCzWPeI2oYehd3ED
    500Example:
      value:
        id: '9'
        kind: Error
        href: /api/managed-services-api/v1/errors/9
        code: MGD-SERV-API-9
        reason: Unspecified error
        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW
    500DeleteExample:
      value:
        id: '9'
        kind: Error
        href: /api/managed-services-api/v1/errors/9
        code: MGD-SERV-API-9
        reason: >-
          error deleting syncset: OCM-EX-9: failed to delete syncset:
          ext-serviceapi-1ix03lndlmq0qfc7sita5sljv8e for cluster id:
          1g5d88q0lrcdv4g7alb7slfgnj3dhbsj%!(EXTRA *errors.Error=identifier is
          '404', code is 'CLUSTERS-MGMT-404' and operation identifier is
          '1g5or50viu07oealuehrkc26dgftj1ac': Cluster
          '1g5d88q0lrcdv4g7alb7slfgnj3dhbsj' not found)
        operation_id: 1iYTsWry6nsqb2sNmFj5bXpD7Ca
    ManagedKafkaExample:
      value: {}
    DataPlaneClusterUpdateStatusRequestExample:
      value: {}
    DataPlaneKafkaUpdateStatusRequestExample:
      value:
        1iSY6RQ3JKI8Q0OTmjQFd3ocFRg:
          conditions:
            - type: Ready
              reason: KafkaInstanceReady
              message: installing
              status: 'False'
              lastTransitionTime: '2018-01-01T00:00:00Z'
          capacity:
            ingressEgressThroughputPerSec: 4Mi
            totalMaxConnections: 500
            maxDataRetentionSize: 100Gi
            maxPartitions: 100
            maxDataRetentionPeriod: P14D
          versions:
            kafka: 2.4.1
            strimzi: 0.21.2
    400InvalidIdExample:
      value:
        id: '203'
        kind: Error
        href: /api/managed-services-api/v1/errors/21
        code: MGD-SERV-API-21
        reason: Bad request
        operation_id: 1lWDGuybIrEnxrAem724gqkkiDv
  securitySchemes:
    Bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
